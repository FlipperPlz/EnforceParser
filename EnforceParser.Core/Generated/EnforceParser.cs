//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/EnforceParser/EnforceParser.Core/Generated\EnforceParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EnforceParser.Core.Generated;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnforceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, CLASS=6, ENUM=7, SWITCH=8, EXTENDS=9, 
		CONST=10, BREAK=11, CASE=12, ELSE=13, FOR=14, CONTINUE=15, FOREACH=16, 
		IF=17, NEW=18, RETURN=19, THIS=20, THREAD=21, VOID=22, WHILE=23, AUTOPTR=24, 
		AUTO=25, REF=26, NULL=27, NOTNULL=28, FUNC=29, NATIVE=30, VOLATILE=31, 
		PROTO=32, STATIC=33, OWNED=34, REFERENCE=35, OUT=36, PROTECTED=37, EVENT=38, 
		TYPEDEF=39, MODDED=40, OVERRIDE=41, SEALED=42, INOUT=43, SUPER=44, TYPENAME=45, 
		POINTER=46, GOTO=47, PRIVATE=48, EXTERNAL=49, DELETE=50, LOCAL=51, TYPE_INT=52, 
		TYPE_FLOAT=53, TYPE_BOOL=54, TYPE_STRING=55, TYPE_VECTOR=56, DEFAULT=57, 
		Increment=58, Decrement=59, LShift=60, RShift=61, LShift_Assign=62, RShift_Assign=63, 
		Subtract_Assign=64, Add_Assign=65, Multiply_Assign=66, Divide_Assign=67, 
		Or_Assign=68, Xor_Assign=69, LessEqual=70, GreaterEqual=71, And_Assign=72, 
		Inequal=73, Equal=74, LogicalOr=75, LogicalAnd=76, BitwiseOr=77, BitwiseXor=78, 
		BitwiseAnd=79, BitwiseNot=80, Greater=81, Less=82, Assign=83, Subtract=84, 
		Add=85, Multiply=86, Divide=87, LParenthesis=88, RParenthesis=89, LCurly=90, 
		RCurly=91, Comma=92, Colon=93, Semicolon=94, LSBracket=95, RSBracket=96, 
		Dot=97, Bang=98, DoubleQuote=99, SingleQuote=100, Modulo=101, IDENTIFIER=102, 
		PREPROC_LINE=103, PREPROC_FILE=104, LiteralString=105, LiteralInteger=106, 
		LiteralFloat=107, LiteralBoolean=108, PREPROC_Whitespaces=109, PREPROC_digits=110, 
		PREPROC_define=111, PREPROC_include=112, PREPROC_undef=113, PREPROC_if=114, 
		PREPROC_ifdef=115, PREPROC_ifndef=116, PREPROC_else=117, PREPROC_endif=118, 
		PREPROC_LParenthesis=119, PREPROC_RParenthesis=120, PREPROC_LSBracket=121, 
		PREPROC_RSBracket=122, PREPROC_Comma=123, PREPROC_Add=124, PREPROC_Subtract=125, 
		PREPROC_Semicolon=126, PREPROC_Assign=127;
	public const int
		RULE_computationalStart = 0, RULE_globalDeclaration = 1, RULE_typeDeclaration = 2, 
		RULE_varAndFunctionBlock = 3, RULE_variableDeclaration = 4, RULE_variableDeclarators = 5, 
		RULE_variableDeclarator = 6, RULE_functionDeclaration = 7, RULE_functionParameters = 8, 
		RULE_functionParameter = 9, RULE_classDeclaration = 10, RULE_enumDeclaration = 11, 
		RULE_enumBody = 12, RULE_enumValue = 13, RULE_expression = 14, RULE_primaryExpression = 15, 
		RULE_objectCreation = 16, RULE_functionCall = 17, RULE_parenthesisedExpression = 18, 
		RULE_functionCallParameters = 19, RULE_functionCallParameterList = 20, 
		RULE_functionCallParameter = 21, RULE_optionalParameter = 22, RULE_arrayIndexExpression = 23, 
		RULE_statementSingleOrBlock = 24, RULE_statementBlock = 25, RULE_statement = 26, 
		RULE_gotoStatement = 27, RULE_ifStatement = 28, RULE_elseStatement = 29, 
		RULE_deleteStatement = 30, RULE_forStatement = 31, RULE_foreachStatement = 32, 
		RULE_whileStatement = 33, RULE_switchStatement = 34, RULE_returnStatement = 35, 
		RULE_breakStatement = 36, RULE_continueStatement = 37, RULE_forControl = 38, 
		RULE_typeExtension_Child = 39, RULE_identifier = 40, RULE_expressionList = 41, 
		RULE_arrayIndex = 42, RULE_literalArray = 43, RULE_literalString = 44, 
		RULE_literalInteger = 45, RULE_literalNull = 46, RULE_literalFloat = 47, 
		RULE_literalBoolean = 48, RULE_foreachVariable = 49, RULE_switchLabel = 50, 
		RULE_switchBlockStatementGroup = 51, RULE_emptyBlock = 52, RULE_typedefDeclaration = 53, 
		RULE_typedefType = 54, RULE_keyword = 55, RULE_typeList = 56, RULE_genericType = 57, 
		RULE_genericTypeDeclarationList = 58, RULE_genericTypeDeclaration = 59, 
		RULE_annotation = 60, RULE_classReference = 61, RULE_typeModifer = 62, 
		RULE_variableModifier = 63, RULE_functionModifier = 64;
	public static readonly string[] ruleNames = {
		"computationalStart", "globalDeclaration", "typeDeclaration", "varAndFunctionBlock", 
		"variableDeclaration", "variableDeclarators", "variableDeclarator", "functionDeclaration", 
		"functionParameters", "functionParameter", "classDeclaration", "enumDeclaration", 
		"enumBody", "enumValue", "expression", "primaryExpression", "objectCreation", 
		"functionCall", "parenthesisedExpression", "functionCallParameters", "functionCallParameterList", 
		"functionCallParameter", "optionalParameter", "arrayIndexExpression", 
		"statementSingleOrBlock", "statementBlock", "statement", "gotoStatement", 
		"ifStatement", "elseStatement", "deleteStatement", "forStatement", "foreachStatement", 
		"whileStatement", "switchStatement", "returnStatement", "breakStatement", 
		"continueStatement", "forControl", "typeExtension_Child", "identifier", 
		"expressionList", "arrayIndex", "literalArray", "literalString", "literalInteger", 
		"literalNull", "literalFloat", "literalBoolean", "foreachVariable", "switchLabel", 
		"switchBlockStatementGroup", "emptyBlock", "typedefDeclaration", "typedefType", 
		"keyword", "typeList", "genericType", "genericTypeDeclarationList", "genericTypeDeclaration", 
		"annotation", "classReference", "typeModifer", "variableModifier", "functionModifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'#'", null, "'class'", "'enum'", "'switch'", 
		"'extends'", "'const'", "'break'", "'case'", null, "'for'", "'contine'", 
		"'foreach'", null, "'new'", "'return'", "'this'", "'thread'", "'void'", 
		"'while'", "'autoptr'", "'auto'", "'ref'", "'null'", "'notnull'", "'func'", 
		"'native'", "'volatile'", "'proto'", "'static'", "'owned'", "'reference'", 
		"'out'", "'protected'", "'event'", "'typedef'", "'modded'", "'override'", 
		"'sealed'", "'inout'", "'super'", "'typename'", "'pointer'", "'goto'", 
		"'private'", "'external'", "'delete'", "'local'", "'int'", "'float'", 
		"'bool'", "'string'", "'vector'", "'default'", "'++'", "'--'", "'<<'", 
		"'>>'", "'<<='", "'>>='", "'-='", "'+='", "'*='", "'/='", "'|='", "'^='", 
		"'<='", "'>='", "'&='", "'!='", "'=='", "'||'", "'&&'", "'|'", "'^'", 
		"'&'", "'~'", "'>'", "'<'", null, null, null, "'*'", "'/'", null, null, 
		"'{'", "'}'", null, "':'", null, null, null, "'.'", "'!'", "'\"'", "'''", 
		"'%'", null, "'__LINE__'", "'__FILE__'", null, null, null, null, null, 
		null, "'define'", "'include'", "'undef'", null, "'ifdef'", "'ifndef'", 
		null, "'endif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "CLASS", "ENUM", "SWITCH", "EXTENDS", 
		"CONST", "BREAK", "CASE", "ELSE", "FOR", "CONTINUE", "FOREACH", "IF", 
		"NEW", "RETURN", "THIS", "THREAD", "VOID", "WHILE", "AUTOPTR", "AUTO", 
		"REF", "NULL", "NOTNULL", "FUNC", "NATIVE", "VOLATILE", "PROTO", "STATIC", 
		"OWNED", "REFERENCE", "OUT", "PROTECTED", "EVENT", "TYPEDEF", "MODDED", 
		"OVERRIDE", "SEALED", "INOUT", "SUPER", "TYPENAME", "POINTER", "GOTO", 
		"PRIVATE", "EXTERNAL", "DELETE", "LOCAL", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
		"TYPE_STRING", "TYPE_VECTOR", "DEFAULT", "Increment", "Decrement", "LShift", 
		"RShift", "LShift_Assign", "RShift_Assign", "Subtract_Assign", "Add_Assign", 
		"Multiply_Assign", "Divide_Assign", "Or_Assign", "Xor_Assign", "LessEqual", 
		"GreaterEqual", "And_Assign", "Inequal", "Equal", "LogicalOr", "LogicalAnd", 
		"BitwiseOr", "BitwiseXor", "BitwiseAnd", "BitwiseNot", "Greater", "Less", 
		"Assign", "Subtract", "Add", "Multiply", "Divide", "LParenthesis", "RParenthesis", 
		"LCurly", "RCurly", "Comma", "Colon", "Semicolon", "LSBracket", "RSBracket", 
		"Dot", "Bang", "DoubleQuote", "SingleQuote", "Modulo", "IDENTIFIER", "PREPROC_LINE", 
		"PREPROC_FILE", "LiteralString", "LiteralInteger", "LiteralFloat", "LiteralBoolean", 
		"PREPROC_Whitespaces", "PREPROC_digits", "PREPROC_define", "PREPROC_include", 
		"PREPROC_undef", "PREPROC_if", "PREPROC_ifdef", "PREPROC_ifndef", "PREPROC_else", 
		"PREPROC_endif", "PREPROC_LParenthesis", "PREPROC_RParenthesis", "PREPROC_LSBracket", 
		"PREPROC_RSBracket", "PREPROC_Comma", "PREPROC_Add", "PREPROC_Subtract", 
		"PREPROC_Semicolon", "PREPROC_Assign"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnforceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnforceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnforceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnforceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnforceParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
				{
				State = 132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 130;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 131;
					typeDeclaration();
					}
					break;
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalDeclaration);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclarationContext typedefDeclaration() {
			return GetRuleContext<TypedefDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeDeclaration);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				enumDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145;
				typedefDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAndFunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public VarAndFunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAndFunctionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVarAndFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVarAndFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public VarAndFunctionBlockContext varAndFunctionBlock() {
		VarAndFunctionBlockContext _localctx = new VarAndFunctionBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAndFunctionBlock);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case VOID:
			case AUTOPTR:
			case AUTO:
			case REF:
			case NOTNULL:
			case FUNC:
			case NATIVE:
			case PROTO:
			case STATIC:
			case REFERENCE:
			case OUT:
			case PROTECTED:
			case OVERRIDE:
			case INOUT:
			case TYPENAME:
			case PRIVATE:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case LSBracket:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 148;
				globalDeclaration();
				}
				}
				break;
			case LCurly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(LCurly);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << OVERRIDE) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
					{
					{
					State = 150;
					globalDeclaration();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 156;
				Match(RCurly);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ClassReferenceContext variableType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 159;
				annotation();
				}
			}

			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 162;
				variableModifier();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			_localctx.variableType = classReference();
			State = 169;
			variableDeclarators();
			State = 170;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			variableDeclarator();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 173;
				Match(Comma);
				State = 174;
				variableDeclarator();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext variableName;
		public ExpressionContext arrayLength;
		public ExpressionContext variableValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx.variableName = identifier();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 181;
				Match(LSBracket);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
					{
					State = 182;
					_localctx.arrayLength = expression(0);
					}
				}

				State = 185;
				Match(RSBracket);
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 188;
				Match(Assign);
				State = 189;
				_localctx.variableValue = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ClassReferenceContext returnType;
		public IToken deconstructor;
		public IdentifierContext functionName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 192;
				annotation();
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATIVE) | (1L << PROTO) | (1L << STATIC) | (1L << PROTECTED) | (1L << OVERRIDE) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 195;
				functionModifier();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			_localctx.returnType = classReference();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitwiseNot) {
				{
				State = 202;
				_localctx.deconstructor = Match(BitwiseNot);
				}
			}

			State = 205;
			_localctx.functionName = identifier();
			State = 206;
			functionParameters();
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 207;
				statementSingleOrBlock();
				}
				break;
			}
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 210;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(LParenthesis);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 214;
				functionParameter();
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 215;
					Match(Comma);
					State = 216;
					functionParameter();
					}
					}
					State = 221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 224;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ClassReferenceContext parameterType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 226;
				variableModifier();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232;
			_localctx.parameterType = classReference();
			State = 233;
			variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		public TypeExtension_ChildContext superclass;
		public VarAndFunctionBlockContext classBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationListContext genericTypeDeclarationList() {
			return GetRuleContext<GenericTypeDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAndFunctionBlockContext varAndFunctionBlock() {
			return GetRuleContext<VarAndFunctionBlockContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 235;
				annotation();
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 238;
				typeModifer();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(CLASS);
			State = 245;
			_localctx.classname = identifier();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 246;
				genericTypeDeclarationList();
				}
			}

			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 249;
				_localctx.superclass = typeExtension_Child();
				}
			}

			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 252;
				_localctx.classBody = varAndFunctionBlock();
				}
				break;
			}
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 255;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public IdentifierContext enumname;
		public TypeExtension_ChildContext superenum;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 258;
				annotation();
				}
			}

			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 261;
				typeModifer();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267;
			Match(ENUM);
			State = 268;
			_localctx.enumname = identifier();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 269;
				_localctx.superenum = typeExtension_Child();
				}
			}

			State = 272;
			enumBody();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 273;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACES() { return GetTokens(EnforceParser.WHITESPACES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACES(int i) {
			return GetToken(EnforceParser.WHITESPACES, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(LCurly);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 277;
				enumValue();
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACES || _la==Comma) {
					{
					{
					State = 278;
					_la = TokenStream.LA(1);
					if ( !(_la==WHITESPACES || _la==Comma) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 279;
					enumValue();
					}
					}
					State = 284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 287;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext itemname;
		public PrimaryExpressionContext itemValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_localctx.itemname = identifier();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 290;
				Match(Assign);
				State = 291;
				_localctx.itemValue = primaryExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IdentifierContext esVariable;
		public ArrayIndexExpressionContext esArrayIndex;
		public FunctionCallContext esFunction;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(EnforceParser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(EnforceParser.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(EnforceParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(EnforceParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(EnforceParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(EnforceParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(EnforceParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(EnforceParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LShift() { return GetToken(EnforceParser.LShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RShift() { return GetToken(EnforceParser.RShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(EnforceParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(EnforceParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(EnforceParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inequal() { return GetToken(EnforceParser.Inequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(EnforceParser.BitwiseOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(EnforceParser.BitwiseAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(EnforceParser.BitwiseXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd() { return GetToken(EnforceParser.LogicalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr() { return GetToken(EnforceParser.LogicalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(EnforceParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract_Assign() { return GetToken(EnforceParser.Subtract_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply_Assign() { return GetToken(EnforceParser.Multiply_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide_Assign() { return GetToken(EnforceParser.Divide_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or_Assign() { return GetToken(EnforceParser.Or_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And_Assign() { return GetToken(EnforceParser.And_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LShift_Assign() { return GetToken(EnforceParser.LShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RShift_Assign() { return GetToken(EnforceParser.RShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(EnforceParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case AUTO:
			case NULL:
			case FUNC:
			case TYPENAME:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case LParenthesis:
			case LCurly:
			case IDENTIFIER:
			case PREPROC_LINE:
			case PREPROC_FILE:
			case LiteralString:
			case LiteralInteger:
			case LiteralFloat:
			case LiteralBoolean:
				{
				State = 295;
				primaryExpression();
				}
				break;
			case THIS:
				{
				State = 296;
				Match(THIS);
				}
				break;
			case SUPER:
				{
				State = 297;
				Match(SUPER);
				}
				break;
			case NEW:
				{
				State = 298;
				objectCreation();
				}
				break;
			case Increment:
			case Decrement:
			case Subtract:
			case Add:
			case Bang:
				{
				State = 299;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (Increment - 58)) | (1L << (Decrement - 58)) | (1L << (Subtract - 58)) | (1L << (Add - 58)) | (1L << (Bang - 58)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 300;
				expression(10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						{
						State = 304;
						parenthesisedExpression();
						}
						State = 305;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 308;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (Multiply - 86)) | (1L << (Divide - 86)) | (1L << (Modulo - 86)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 309;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 311;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Subtract || _la==Add) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 312;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 313;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 314;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LShift || _la==RShift) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 315;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 317;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (LessEqual - 70)) | (1L << (GreaterEqual - 70)) | (1L << (Greater - 70)) | (1L << (Less - 70)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 318;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 320;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Inequal || _la==Equal) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 321;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 323;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (BitwiseOr - 77)) | (1L << (BitwiseXor - 77)) | (1L << (BitwiseAnd - 77)) | (1L << (BitwiseNot - 77)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 324;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 326;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LogicalOr || _la==LogicalAnd) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 327;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 329;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (LShift_Assign - 62)) | (1L << (RShift_Assign - 62)) | (1L << (Subtract_Assign - 62)) | (1L << (Add_Assign - 62)) | (1L << (Multiply_Assign - 62)) | (1L << (Divide_Assign - 62)) | (1L << (Or_Assign - 62)) | (1L << (And_Assign - 62)) | (1L << (Assign - 62)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 330;
						expression(1);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 332;
						_localctx.op = Match(Dot);
						State = 336;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
							{
							State = 333;
							_localctx.esVariable = identifier();
							}
							break;
						case 2:
							{
							State = 334;
							_localctx.esArrayIndex = arrayIndexExpression();
							}
							break;
						case 3:
							{
							State = 335;
							_localctx.esFunction = functionCall();
							}
							break;
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 338;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 339;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Increment || _la==Decrement) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public FunctionCallContext esFunction;
		public LiteralStringContext esString;
		public LiteralIntegerContext esInt;
		public LiteralFloatContext esFloat;
		public LiteralBooleanContext esBool;
		public ParenthesisedExpressionContext parExpression;
		public LiteralArrayContext esArray;
		public LiteralNullContext esNull;
		public IdentifierContext esVariable;
		public ArrayIndexExpressionContext esArrayIndex;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_primaryExpression);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				_localctx.esFunction = functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				_localctx.esString = literalString();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				_localctx.esInt = literalInteger();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 348;
				_localctx.esFloat = literalFloat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 349;
				_localctx.esBool = literalBoolean();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 350;
				_localctx.parExpression = parenthesisedExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 351;
				_localctx.esArray = literalArray();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 352;
				_localctx.esNull = literalNull();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 353;
				_localctx.esVariable = identifier();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 354;
				_localctx.esArrayIndex = arrayIndexExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		public IdentifierContext objectName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 32, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(NEW);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 358;
				variableModifier();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 364;
			_localctx.objectName = identifier();
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 365;
				typeList();
				}
				break;
			}
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 368;
				functionCallParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			identifier();
			State = 372;
			functionCallParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		public ParenthesisedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParenthesisedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParenthesisedExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisedExpressionContext parenthesisedExpression() {
		ParenthesisedExpressionContext _localctx = new ParenthesisedExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_parenthesisedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(LParenthesis);
			State = 375;
			expression(0);
			State = 376;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterListContext functionCallParameterList() {
			return GetRuleContext<FunctionCallParameterListContext>(0);
		}
		public FunctionCallParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParametersContext functionCallParameters() {
		FunctionCallParametersContext _localctx = new FunctionCallParametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionCallParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(LParenthesis);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
				{
				State = 379;
				functionCallParameterList();
				}
			}

			State = 382;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext[] functionCallParameter() {
			return GetRuleContexts<FunctionCallParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext functionCallParameter(int i) {
			return GetRuleContext<FunctionCallParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionCallParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterListContext functionCallParameterList() {
		FunctionCallParameterListContext _localctx = new FunctionCallParameterListContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionCallParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			functionCallParameter();
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 385;
				Match(Comma);
				State = 386;
				functionCallParameter();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public FunctionCallParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterContext functionCallParameter() {
		FunctionCallParameterContext _localctx = new FunctionCallParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCallParameter);
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		public IdentifierContext argumentName;
		public ExpressionContext argumentValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_optionalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_localctx.argumentName = identifier();
			State = 397;
			Match(Colon);
			State = 398;
			_localctx.argumentValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public ArrayIndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndexExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexExpressionContext arrayIndexExpression() {
		ArrayIndexExpressionContext _localctx = new ArrayIndexExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayIndexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			identifier();
			State = 401;
			arrayIndex();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSingleOrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public StatementSingleOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSingleOrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementSingleOrBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementSingleOrBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementSingleOrBlockContext statementSingleOrBlock() {
		StatementSingleOrBlockContext _localctx = new StatementSingleOrBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_statementSingleOrBlock);
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				statementBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockContext emptyBlock() {
			return GetRuleContext<EmptyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_statementBlock);
		int _la;
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				emptyBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				Match(LCurly);
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Semicolon - 84)) | (1L << (LSBracket - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
					{
					{
					State = 409;
					statement();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 415;
				Match(RCurly);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expressionaryStatement;
		public VariableDeclarationContext esVariableDeclaration;
		public DeleteStatementContext esDelete;
		public IfStatementContext esIf;
		public ForStatementContext esFor;
		public ForeachStatementContext esForEach;
		public WhileStatementContext esWhile;
		public SwitchStatementContext esSwitch;
		public ReturnStatementContext esReturn;
		public BreakStatementContext esBreak;
		public ContinueStatementContext esContinue;
		public GotoStatementContext esGoto;
		public IToken esSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_statement);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				_localctx.expressionaryStatement = expression(0);
				State = 419;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				_localctx.esVariableDeclaration = variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				_localctx.esDelete = deleteStatement();
				State = 423;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 425;
				_localctx.esIf = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 426;
				_localctx.esFor = forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 427;
				_localctx.esForEach = foreachStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 428;
				_localctx.esWhile = whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 429;
				_localctx.esSwitch = switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 430;
				_localctx.esReturn = returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 431;
				_localctx.esBreak = breakStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 432;
				_localctx.esContinue = continueStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 433;
				_localctx.esGoto = gotoStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 434;
				_localctx.esSemicolon = Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(GOTO);
			State = 438;
			expression(0);
			State = 439;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext ifBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(IF);
			State = 442;
			_localctx.condition = parenthesisedExpression();
			State = 443;
			_localctx.ifBody = statementSingleOrBlock();
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 444;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext elseBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(ELSE);
			State = 448;
			_localctx.elseBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(DELETE);
			State = 451;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(FOR);
			State = 454;
			Match(LParenthesis);
			State = 455;
			forControl();
			State = 456;
			Match(RParenthesis);
			State = 457;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public ExpressionContext enumerating;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachVariableContext foreachVariable() {
			return GetRuleContext<ForeachVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(FOREACH);
			State = 460;
			Match(LParenthesis);
			State = 461;
			foreachVariable();
			State = 462;
			Match(Colon);
			State = 463;
			_localctx.enumerating = expression(0);
			State = 464;
			Match(RParenthesis);
			State = 465;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(WHILE);
			State = 468;
			_localctx.condition = parenthesisedExpression();
			State = 469;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(SWITCH);
			State = 472;
			parenthesisedExpression();
			State = 473;
			Match(LCurly);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 474;
				switchBlockStatementGroup();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(RETURN);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
				{
				State = 483;
				expression(0);
				}
			}

			State = 486;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(BREAK);
			State = 489;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(CONTINUE);
			State = 492;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public StatementContext forInit;
		public ExpressionContext forCondition;
		public ExpressionContext forIteration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnforceParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnforceParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 76, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_localctx.forInit = statement();
			State = 495;
			_localctx.forCondition = expression(0);
			State = 496;
			Match(Semicolon);
			State = 497;
			_localctx.forIteration = expression(0);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Semicolon) {
				{
				{
				State = 498;
				Match(Semicolon);
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtension_ChildContext : ParserRuleContext {
		public IToken extends;
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationListContext genericTypeDeclarationList() {
			return GetRuleContext<GenericTypeDeclarationListContext>(0);
		}
		public TypeExtension_ChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension_Child; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeExtension_Child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeExtension_Child(this);
		}
	}

	[RuleVersion(0)]
	public TypeExtension_ChildContext typeExtension_Child() {
		TypeExtension_ChildContext _localctx = new TypeExtension_ChildContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeExtension_Child);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			_localctx.extends = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDS || _la==Colon) ) {
				_localctx.extends = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 505;
			_localctx.classname = identifier();
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 506;
				genericTypeDeclarationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 82, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			expression(0);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 512;
				Match(Comma);
				State = 513;
				expression(0);
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndex(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 84, RULE_arrayIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(LSBracket);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
				{
				State = 520;
				expression(0);
				}
			}

			State = 523;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 86, RULE_literalArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(LCurly);
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
				{
				State = 526;
				expressionList();
				}
			}

			State = 529;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(EnforceParser.LiteralString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_LINE() { return GetToken(EnforceParser.PREPROC_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_FILE() { return GetToken(EnforceParser.PREPROC_FILE, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 88, RULE_literalString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (PREPROC_LINE - 103)) | (1L << (PREPROC_FILE - 103)) | (1L << (LiteralString - 103)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(EnforceParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 90, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 92, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(EnforceParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 94, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 96, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(LiteralBoolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachVariableContext : ParserRuleContext {
		public IdentifierContext iteratedVariableType;
		public IdentifierContext iteratedVariableName;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ForeachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachVariable(this);
		}
	}

	[RuleVersion(0)]
	public ForeachVariableContext foreachVariable() {
		ForeachVariableContext _localctx = new ForeachVariableContext(Context, State);
		EnterRule(_localctx, 98, RULE_foreachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			_localctx.iteratedVariableType = identifier();
			State = 542;
			_localctx.iteratedVariableName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 100, RULE_switchLabel);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				Match(CASE);
				{
				State = 545;
				expression(0);
				}
				State = 546;
				Match(Colon);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548;
				Match(DEFAULT);
				State = 549;
				Match(Colon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel() {
			return GetRuleContext<SwitchLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 102, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			switchLabel();
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 553;
				statementBlock();
				}
				break;
			case 2:
				{
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Subtract - 84)) | (1L << (Add - 84)) | (1L << (LParenthesis - 84)) | (1L << (LCurly - 84)) | (1L << (Semicolon - 84)) | (1L << (LSBracket - 84)) | (1L << (Bang - 84)) | (1L << (IDENTIFIER - 84)) | (1L << (PREPROC_LINE - 84)) | (1L << (PREPROC_FILE - 84)) | (1L << (LiteralString - 84)) | (1L << (LiteralInteger - 84)) | (1L << (LiteralFloat - 84)) | (1L << (LiteralBoolean - 84)))) != 0)) {
					{
					{
					State = 554;
					statement();
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public EmptyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEmptyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEmptyBlock(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockContext emptyBlock() {
		EmptyBlockContext _localctx = new EmptyBlockContext(Context, State);
		EnterRule(_localctx, 104, RULE_emptyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(LCurly);
			State = 563;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclarationContext : ParserRuleContext {
		public TypedefTypeContext fromType;
		public IdentifierContext toType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedefTypeContext typedefType() {
			return GetRuleContext<TypedefTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypedefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclarationContext typedefDeclaration() {
		TypedefDeclarationContext _localctx = new TypedefDeclarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_typedefDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 565;
				annotation();
				}
			}

			State = 568;
			Match(TYPEDEF);
			State = 569;
			_localctx.fromType = typedefType();
			State = 570;
			_localctx.toType = identifier();
			State = 571;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		public TypedefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefTypeContext typedefType() {
		TypedefTypeContext _localctx = new TypedefTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_typedefType);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				classReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(EnforceParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(EnforceParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 110, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << SWITCH) | (1L << EXTENDS) | (1L << CONST) | (1L << BREAK) | (1L << CASE) | (1L << ELSE) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << POINTER) | (1L << GOTO) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << DEFAULT))) != 0) || _la==LiteralBoolean) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext[] genericType() {
			return GetRuleContexts<GenericTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType(int i) {
			return GetRuleContext<GenericTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(Less);
			State = 580;
			genericType();
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 581;
				Match(Comma);
				State = 582;
				genericType();
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 588;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public IdentifierContext type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_genericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 590;
				variableModifier();
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 596;
			_localctx.type = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext[] genericTypeDeclaration() {
			return GetRuleContexts<GenericTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext genericTypeDeclaration(int i) {
			return GetRuleContext<GenericTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public GenericTypeDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationListContext genericTypeDeclarationList() {
		GenericTypeDeclarationListContext _localctx = new GenericTypeDeclarationListContext(Context, State);
		EnterRule(_localctx, 116, RULE_genericTypeDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(Less);
			State = 599;
			genericTypeDeclaration();
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 600;
				Match(Comma);
				State = 601;
				genericTypeDeclaration();
				}
				}
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationContext : ParserRuleContext {
		public ClassReferenceContext type;
		public IdentifierContext typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public GenericTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationContext genericTypeDeclaration() {
		GenericTypeDeclarationContext _localctx = new GenericTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_genericTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 609;
				variableModifier();
				}
				}
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 615;
			_localctx.type = classReference();
			State = 616;
			_localctx.typeName = identifier();
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 617;
				Match(LSBracket);
				State = 618;
				Match(RSBracket);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(LSBracket);
			State = 622;
			functionCall();
			State = 623;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassReferenceContext : ParserRuleContext {
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ClassReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassReference(this);
		}
	}

	[RuleVersion(0)]
	public ClassReferenceContext classReference() {
		ClassReferenceContext _localctx = new ClassReferenceContext(Context, State);
		EnterRule(_localctx, 122, RULE_classReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			_localctx.classname = identifier();
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 626;
				typeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModiferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		public TypeModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeModifer(this);
		}
	}

	[RuleVersion(0)]
	public TypeModiferContext typeModifer() {
		TypeModiferContext _localctx = new TypeModiferContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			_la = TokenStream.LA(1);
			if ( !(_la==MODDED || _la==SEALED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 128, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATIVE) | (1L << PROTO) | (1L << STATIC) | (1L << PROTECTED) | (1L << OVERRIDE) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,127,636,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,1,0,1,0,5,0,133,8,0,10,0,12,0,136,9,0,1,0,1,0,1,1,1,1,3,1,142,
		8,1,1,2,1,2,1,2,3,2,147,8,2,1,3,1,3,1,3,5,3,152,8,3,10,3,12,3,155,9,3,
		1,3,3,3,158,8,3,1,4,3,4,161,8,4,1,4,5,4,164,8,4,10,4,12,4,167,9,4,1,4,
		1,4,1,4,1,4,1,5,1,5,1,5,5,5,176,8,5,10,5,12,5,179,9,5,1,6,1,6,1,6,3,6,
		184,8,6,1,6,3,6,187,8,6,1,6,1,6,3,6,191,8,6,1,7,3,7,194,8,7,1,7,5,7,197,
		8,7,10,7,12,7,200,9,7,1,7,1,7,3,7,204,8,7,1,7,1,7,1,7,3,7,209,8,7,1,7,
		3,7,212,8,7,1,8,1,8,1,8,1,8,5,8,218,8,8,10,8,12,8,221,9,8,3,8,223,8,8,
		1,8,1,8,1,9,5,9,228,8,9,10,9,12,9,231,9,9,1,9,1,9,1,9,1,10,3,10,237,8,
		10,1,10,5,10,240,8,10,10,10,12,10,243,9,10,1,10,1,10,1,10,3,10,248,8,10,
		1,10,3,10,251,8,10,1,10,3,10,254,8,10,1,10,3,10,257,8,10,1,11,3,11,260,
		8,11,1,11,5,11,263,8,11,10,11,12,11,266,9,11,1,11,1,11,1,11,3,11,271,8,
		11,1,11,1,11,3,11,275,8,11,1,12,1,12,1,12,1,12,5,12,281,8,12,10,12,12,
		12,284,9,12,3,12,286,8,12,1,12,1,12,1,13,1,13,1,13,3,13,293,8,13,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,3,14,302,8,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,337,8,14,1,14,1,14,5,14,341,8,14,10,14,12,14,344,9,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,356,8,15,1,16,1,16,5,16,360,8,
		16,10,16,12,16,363,9,16,1,16,1,16,3,16,367,8,16,1,16,3,16,370,8,16,1,17,
		1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,3,19,381,8,19,1,19,1,19,1,20,1,
		20,1,20,5,20,388,8,20,10,20,12,20,391,9,20,1,21,1,21,3,21,395,8,21,1,22,
		1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,406,8,24,1,25,1,25,1,25,5,
		25,411,8,25,10,25,12,25,414,9,25,1,25,3,25,417,8,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
		436,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,446,8,28,1,29,1,
		29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,476,
		8,34,10,34,12,34,479,9,34,1,34,1,34,1,35,1,35,3,35,485,8,35,1,35,1,35,
		1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,5,38,500,8,38,10,
		38,12,38,503,9,38,1,39,1,39,1,39,3,39,508,8,39,1,40,1,40,1,41,1,41,1,41,
		5,41,515,8,41,10,41,12,41,518,9,41,1,42,1,42,3,42,522,8,42,1,42,1,42,1,
		43,1,43,3,43,528,8,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
		1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,551,8,50,1,
		51,1,51,1,51,5,51,556,8,51,10,51,12,51,559,9,51,3,51,561,8,51,1,52,1,52,
		1,52,1,53,3,53,567,8,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,576,8,
		54,1,55,1,55,1,56,1,56,1,56,1,56,5,56,584,8,56,10,56,12,56,587,9,56,1,
		56,1,56,1,57,5,57,592,8,57,10,57,12,57,595,9,57,1,57,1,57,1,58,1,58,1,
		58,1,58,5,58,603,8,58,10,58,12,58,606,9,58,1,58,1,58,1,59,5,59,611,8,59,
		10,59,12,59,614,9,59,1,59,1,59,1,59,1,59,3,59,620,8,59,1,60,1,60,1,60,
		1,60,1,61,1,61,3,61,628,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,0,1,28,
		65,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,0,18,
		2,0,5,5,92,92,3,0,58,59,84,85,98,98,2,0,86,87,101,101,1,0,84,85,1,0,60,
		61,2,0,70,71,81,82,1,0,73,74,1,0,77,80,1,0,75,76,3,0,62,68,72,72,83,83,
		1,0,58,59,2,0,9,9,93,93,6,0,22,22,25,25,29,29,45,45,52,56,102,102,1,0,
		103,105,2,0,6,57,108,108,2,0,40,40,42,42,8,0,10,10,24,24,26,26,28,28,32,
		33,35,37,43,43,48,48,5,0,30,30,32,33,37,37,41,41,48,48,670,0,134,1,0,0,
		0,2,141,1,0,0,0,4,146,1,0,0,0,6,157,1,0,0,0,8,160,1,0,0,0,10,172,1,0,0,
		0,12,180,1,0,0,0,14,193,1,0,0,0,16,213,1,0,0,0,18,229,1,0,0,0,20,236,1,
		0,0,0,22,259,1,0,0,0,24,276,1,0,0,0,26,289,1,0,0,0,28,301,1,0,0,0,30,355,
		1,0,0,0,32,357,1,0,0,0,34,371,1,0,0,0,36,374,1,0,0,0,38,378,1,0,0,0,40,
		384,1,0,0,0,42,394,1,0,0,0,44,396,1,0,0,0,46,400,1,0,0,0,48,405,1,0,0,
		0,50,416,1,0,0,0,52,435,1,0,0,0,54,437,1,0,0,0,56,441,1,0,0,0,58,447,1,
		0,0,0,60,450,1,0,0,0,62,453,1,0,0,0,64,459,1,0,0,0,66,467,1,0,0,0,68,471,
		1,0,0,0,70,482,1,0,0,0,72,488,1,0,0,0,74,491,1,0,0,0,76,494,1,0,0,0,78,
		504,1,0,0,0,80,509,1,0,0,0,82,511,1,0,0,0,84,519,1,0,0,0,86,525,1,0,0,
		0,88,531,1,0,0,0,90,533,1,0,0,0,92,535,1,0,0,0,94,537,1,0,0,0,96,539,1,
		0,0,0,98,541,1,0,0,0,100,550,1,0,0,0,102,552,1,0,0,0,104,562,1,0,0,0,106,
		566,1,0,0,0,108,575,1,0,0,0,110,577,1,0,0,0,112,579,1,0,0,0,114,593,1,
		0,0,0,116,598,1,0,0,0,118,612,1,0,0,0,120,621,1,0,0,0,122,625,1,0,0,0,
		124,629,1,0,0,0,126,631,1,0,0,0,128,633,1,0,0,0,130,133,3,2,1,0,131,133,
		3,4,2,0,132,130,1,0,0,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,
		0,134,135,1,0,0,0,135,137,1,0,0,0,136,134,1,0,0,0,137,138,5,0,0,1,138,
		1,1,0,0,0,139,142,3,8,4,0,140,142,3,14,7,0,141,139,1,0,0,0,141,140,1,0,
		0,0,142,3,1,0,0,0,143,147,3,20,10,0,144,147,3,22,11,0,145,147,3,106,53,
		0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,1,0,0,0,147,5,1,0,0,0,148,158,
		3,2,1,0,149,153,5,90,0,0,150,152,3,2,1,0,151,150,1,0,0,0,152,155,1,0,0,
		0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,
		158,5,91,0,0,157,148,1,0,0,0,157,149,1,0,0,0,158,7,1,0,0,0,159,161,3,120,
		60,0,160,159,1,0,0,0,160,161,1,0,0,0,161,165,1,0,0,0,162,164,3,126,63,
		0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,
		168,1,0,0,0,167,165,1,0,0,0,168,169,3,122,61,0,169,170,3,10,5,0,170,171,
		5,94,0,0,171,9,1,0,0,0,172,177,3,12,6,0,173,174,5,92,0,0,174,176,3,12,
		6,0,175,173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		11,1,0,0,0,179,177,1,0,0,0,180,186,3,80,40,0,181,183,5,95,0,0,182,184,
		3,28,14,0,183,182,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,187,5,96,
		0,0,186,181,1,0,0,0,186,187,1,0,0,0,187,190,1,0,0,0,188,189,5,83,0,0,189,
		191,3,28,14,0,190,188,1,0,0,0,190,191,1,0,0,0,191,13,1,0,0,0,192,194,3,
		120,60,0,193,192,1,0,0,0,193,194,1,0,0,0,194,198,1,0,0,0,195,197,3,128,
		64,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,
		201,1,0,0,0,200,198,1,0,0,0,201,203,3,122,61,0,202,204,5,80,0,0,203,202,
		1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,3,80,40,0,206,208,3,16,
		8,0,207,209,3,48,24,0,208,207,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,
		210,212,5,94,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,15,1,0,0,0,213,222,
		5,88,0,0,214,219,3,18,9,0,215,216,5,92,0,0,216,218,3,18,9,0,217,215,1,
		0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,
		221,219,1,0,0,0,222,214,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,
		5,89,0,0,225,17,1,0,0,0,226,228,3,126,63,0,227,226,1,0,0,0,228,231,1,0,
		0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,
		233,3,122,61,0,233,234,3,12,6,0,234,19,1,0,0,0,235,237,3,120,60,0,236,
		235,1,0,0,0,236,237,1,0,0,0,237,241,1,0,0,0,238,240,3,124,62,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,
		0,243,241,1,0,0,0,244,245,5,6,0,0,245,247,3,80,40,0,246,248,3,116,58,0,
		247,246,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,251,3,78,39,0,250,
		249,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,254,3,6,3,0,253,252,1,
		0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,257,5,94,0,0,256,255,1,0,0,0,
		256,257,1,0,0,0,257,21,1,0,0,0,258,260,3,120,60,0,259,258,1,0,0,0,259,
		260,1,0,0,0,260,264,1,0,0,0,261,263,3,124,62,0,262,261,1,0,0,0,263,266,
		1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,
		0,267,268,5,7,0,0,268,270,3,80,40,0,269,271,3,78,39,0,270,269,1,0,0,0,
		270,271,1,0,0,0,271,272,1,0,0,0,272,274,3,24,12,0,273,275,5,94,0,0,274,
		273,1,0,0,0,274,275,1,0,0,0,275,23,1,0,0,0,276,285,5,90,0,0,277,282,3,
		26,13,0,278,279,7,0,0,0,279,281,3,26,13,0,280,278,1,0,0,0,281,284,1,0,
		0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,285,
		277,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,91,0,0,288,25,1,
		0,0,0,289,292,3,80,40,0,290,291,5,83,0,0,291,293,3,30,15,0,292,290,1,0,
		0,0,292,293,1,0,0,0,293,27,1,0,0,0,294,295,6,14,-1,0,295,302,3,30,15,0,
		296,302,5,20,0,0,297,302,5,44,0,0,298,302,3,32,16,0,299,300,7,1,0,0,300,
		302,3,28,14,10,301,294,1,0,0,0,301,296,1,0,0,0,301,297,1,0,0,0,301,298,
		1,0,0,0,301,299,1,0,0,0,302,342,1,0,0,0,303,304,10,9,0,0,304,305,3,36,
		18,0,305,306,3,28,14,10,306,341,1,0,0,0,307,308,10,8,0,0,308,309,7,2,0,
		0,309,341,3,28,14,9,310,311,10,7,0,0,311,312,7,3,0,0,312,341,3,28,14,8,
		313,314,10,6,0,0,314,315,7,4,0,0,315,341,3,28,14,7,316,317,10,5,0,0,317,
		318,7,5,0,0,318,341,3,28,14,6,319,320,10,4,0,0,320,321,7,6,0,0,321,341,
		3,28,14,5,322,323,10,3,0,0,323,324,7,7,0,0,324,341,3,28,14,4,325,326,10,
		2,0,0,326,327,7,8,0,0,327,341,3,28,14,3,328,329,10,1,0,0,329,330,7,9,0,
		0,330,341,3,28,14,1,331,332,10,13,0,0,332,336,5,97,0,0,333,337,3,80,40,
		0,334,337,3,46,23,0,335,337,3,34,17,0,336,333,1,0,0,0,336,334,1,0,0,0,
		336,335,1,0,0,0,337,341,1,0,0,0,338,339,10,11,0,0,339,341,7,10,0,0,340,
		303,1,0,0,0,340,307,1,0,0,0,340,310,1,0,0,0,340,313,1,0,0,0,340,316,1,
		0,0,0,340,319,1,0,0,0,340,322,1,0,0,0,340,325,1,0,0,0,340,328,1,0,0,0,
		340,331,1,0,0,0,340,338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,
		1,0,0,0,343,29,1,0,0,0,344,342,1,0,0,0,345,356,3,34,17,0,346,356,3,88,
		44,0,347,356,3,90,45,0,348,356,3,94,47,0,349,356,3,96,48,0,350,356,3,36,
		18,0,351,356,3,86,43,0,352,356,3,92,46,0,353,356,3,80,40,0,354,356,3,46,
		23,0,355,345,1,0,0,0,355,346,1,0,0,0,355,347,1,0,0,0,355,348,1,0,0,0,355,
		349,1,0,0,0,355,350,1,0,0,0,355,351,1,0,0,0,355,352,1,0,0,0,355,353,1,
		0,0,0,355,354,1,0,0,0,356,31,1,0,0,0,357,361,5,18,0,0,358,360,3,126,63,
		0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,
		364,1,0,0,0,363,361,1,0,0,0,364,366,3,80,40,0,365,367,3,112,56,0,366,365,
		1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,370,3,38,19,0,369,368,1,0,
		0,0,369,370,1,0,0,0,370,33,1,0,0,0,371,372,3,80,40,0,372,373,3,38,19,0,
		373,35,1,0,0,0,374,375,5,88,0,0,375,376,3,28,14,0,376,377,5,89,0,0,377,
		37,1,0,0,0,378,380,5,88,0,0,379,381,3,40,20,0,380,379,1,0,0,0,380,381,
		1,0,0,0,381,382,1,0,0,0,382,383,5,89,0,0,383,39,1,0,0,0,384,389,3,42,21,
		0,385,386,5,92,0,0,386,388,3,42,21,0,387,385,1,0,0,0,388,391,1,0,0,0,389,
		387,1,0,0,0,389,390,1,0,0,0,390,41,1,0,0,0,391,389,1,0,0,0,392,395,3,28,
		14,0,393,395,3,44,22,0,394,392,1,0,0,0,394,393,1,0,0,0,395,43,1,0,0,0,
		396,397,3,80,40,0,397,398,5,93,0,0,398,399,3,28,14,0,399,45,1,0,0,0,400,
		401,3,80,40,0,401,402,3,84,42,0,402,47,1,0,0,0,403,406,3,52,26,0,404,406,
		3,50,25,0,405,403,1,0,0,0,405,404,1,0,0,0,406,49,1,0,0,0,407,417,3,104,
		52,0,408,412,5,90,0,0,409,411,3,52,26,0,410,409,1,0,0,0,411,414,1,0,0,
		0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,
		417,5,91,0,0,416,407,1,0,0,0,416,408,1,0,0,0,417,51,1,0,0,0,418,419,3,
		28,14,0,419,420,5,94,0,0,420,436,1,0,0,0,421,436,3,8,4,0,422,423,3,60,
		30,0,423,424,5,94,0,0,424,436,1,0,0,0,425,436,3,56,28,0,426,436,3,62,31,
		0,427,436,3,64,32,0,428,436,3,66,33,0,429,436,3,68,34,0,430,436,3,70,35,
		0,431,436,3,72,36,0,432,436,3,74,37,0,433,436,3,54,27,0,434,436,5,94,0,
		0,435,418,1,0,0,0,435,421,1,0,0,0,435,422,1,0,0,0,435,425,1,0,0,0,435,
		426,1,0,0,0,435,427,1,0,0,0,435,428,1,0,0,0,435,429,1,0,0,0,435,430,1,
		0,0,0,435,431,1,0,0,0,435,432,1,0,0,0,435,433,1,0,0,0,435,434,1,0,0,0,
		436,53,1,0,0,0,437,438,5,47,0,0,438,439,3,28,14,0,439,440,5,94,0,0,440,
		55,1,0,0,0,441,442,5,17,0,0,442,443,3,36,18,0,443,445,3,48,24,0,444,446,
		3,58,29,0,445,444,1,0,0,0,445,446,1,0,0,0,446,57,1,0,0,0,447,448,5,13,
		0,0,448,449,3,48,24,0,449,59,1,0,0,0,450,451,5,50,0,0,451,452,3,28,14,
		0,452,61,1,0,0,0,453,454,5,14,0,0,454,455,5,88,0,0,455,456,3,76,38,0,456,
		457,5,89,0,0,457,458,3,48,24,0,458,63,1,0,0,0,459,460,5,16,0,0,460,461,
		5,88,0,0,461,462,3,98,49,0,462,463,5,93,0,0,463,464,3,28,14,0,464,465,
		5,89,0,0,465,466,3,48,24,0,466,65,1,0,0,0,467,468,5,23,0,0,468,469,3,36,
		18,0,469,470,3,48,24,0,470,67,1,0,0,0,471,472,5,8,0,0,472,473,3,36,18,
		0,473,477,5,90,0,0,474,476,3,102,51,0,475,474,1,0,0,0,476,479,1,0,0,0,
		477,475,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,
		5,91,0,0,481,69,1,0,0,0,482,484,5,19,0,0,483,485,3,28,14,0,484,483,1,0,
		0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,5,94,0,0,487,71,1,0,0,0,488,
		489,5,11,0,0,489,490,5,94,0,0,490,73,1,0,0,0,491,492,5,15,0,0,492,493,
		5,94,0,0,493,75,1,0,0,0,494,495,3,52,26,0,495,496,3,28,14,0,496,497,5,
		94,0,0,497,501,3,28,14,0,498,500,5,94,0,0,499,498,1,0,0,0,500,503,1,0,
		0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,77,1,0,0,0,503,501,1,0,0,0,504,
		505,7,11,0,0,505,507,3,80,40,0,506,508,3,116,58,0,507,506,1,0,0,0,507,
		508,1,0,0,0,508,79,1,0,0,0,509,510,7,12,0,0,510,81,1,0,0,0,511,516,3,28,
		14,0,512,513,5,92,0,0,513,515,3,28,14,0,514,512,1,0,0,0,515,518,1,0,0,
		0,516,514,1,0,0,0,516,517,1,0,0,0,517,83,1,0,0,0,518,516,1,0,0,0,519,521,
		5,95,0,0,520,522,3,28,14,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,
		0,0,523,524,5,96,0,0,524,85,1,0,0,0,525,527,5,90,0,0,526,528,3,82,41,0,
		527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,91,0,0,530,87,
		1,0,0,0,531,532,7,13,0,0,532,89,1,0,0,0,533,534,5,106,0,0,534,91,1,0,0,
		0,535,536,5,27,0,0,536,93,1,0,0,0,537,538,5,107,0,0,538,95,1,0,0,0,539,
		540,5,108,0,0,540,97,1,0,0,0,541,542,3,80,40,0,542,543,3,80,40,0,543,99,
		1,0,0,0,544,545,5,12,0,0,545,546,3,28,14,0,546,547,5,93,0,0,547,551,1,
		0,0,0,548,549,5,57,0,0,549,551,5,93,0,0,550,544,1,0,0,0,550,548,1,0,0,
		0,551,101,1,0,0,0,552,560,3,100,50,0,553,561,3,50,25,0,554,556,3,52,26,
		0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,
		561,1,0,0,0,559,557,1,0,0,0,560,553,1,0,0,0,560,557,1,0,0,0,561,103,1,
		0,0,0,562,563,5,90,0,0,563,564,5,91,0,0,564,105,1,0,0,0,565,567,3,120,
		60,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,5,39,0,0,
		569,570,3,108,54,0,570,571,3,80,40,0,571,572,5,94,0,0,572,107,1,0,0,0,
		573,576,3,110,55,0,574,576,3,122,61,0,575,573,1,0,0,0,575,574,1,0,0,0,
		576,109,1,0,0,0,577,578,7,14,0,0,578,111,1,0,0,0,579,580,5,82,0,0,580,
		585,3,114,57,0,581,582,5,92,0,0,582,584,3,114,57,0,583,581,1,0,0,0,584,
		587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,585,1,
		0,0,0,588,589,5,81,0,0,589,113,1,0,0,0,590,592,3,126,63,0,591,590,1,0,
		0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,
		593,1,0,0,0,596,597,3,80,40,0,597,115,1,0,0,0,598,599,5,82,0,0,599,604,
		3,118,59,0,600,601,5,92,0,0,601,603,3,118,59,0,602,600,1,0,0,0,603,606,
		1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,604,1,0,0,
		0,607,608,5,81,0,0,608,117,1,0,0,0,609,611,3,126,63,0,610,609,1,0,0,0,
		611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,612,
		1,0,0,0,615,616,3,122,61,0,616,619,3,80,40,0,617,618,5,95,0,0,618,620,
		5,96,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,119,1,0,0,0,621,622,5,95,
		0,0,622,623,3,34,17,0,623,624,5,96,0,0,624,121,1,0,0,0,625,627,3,80,40,
		0,626,628,3,112,56,0,627,626,1,0,0,0,627,628,1,0,0,0,628,123,1,0,0,0,629,
		630,7,15,0,0,630,125,1,0,0,0,631,632,7,16,0,0,632,127,1,0,0,0,633,634,
		7,17,0,0,634,129,1,0,0,0,67,132,134,141,146,153,157,160,165,177,183,186,
		190,193,198,203,208,211,219,222,229,236,241,247,250,253,256,259,264,270,
		274,282,285,292,301,336,340,342,355,361,366,369,380,389,394,405,412,416,
		435,445,477,484,501,507,516,521,527,550,557,560,566,575,585,593,604,612,
		619,627
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
