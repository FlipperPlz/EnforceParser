//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/EnforceParser/EnforceParser.Core/Generated\EnforceParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EnforceParser.Core.Generated;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnforceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, CLASS=6, ENUM=7, SWITCH=8, EXTENDS=9, 
		CONST=10, BREAK=11, CASE=12, ELSE=13, FOR=14, CONTINUE=15, FOREACH=16, 
		IF=17, NEW=18, RETURN=19, THIS=20, THREAD=21, VOID=22, WHILE=23, AUTOPTR=24, 
		AUTO=25, REF=26, NULL=27, NOTNULL=28, FUNC=29, NATIVE=30, VOLATILE=31, 
		PROTO=32, STATIC=33, OWNED=34, REFERENCE=35, OUT=36, PROTECTED=37, EVENT=38, 
		TYPEDEF=39, MODDED=40, OVERRIDE=41, SEALED=42, INOUT=43, SUPER=44, TYPENAME=45, 
		POINTER=46, GOTO=47, PRIVATE=48, EXTERNAL=49, DELETE=50, LOCAL=51, TYPE_INT=52, 
		TYPE_FLOAT=53, TYPE_BOOL=54, TYPE_STRING=55, TYPE_VECTOR=56, DEFAULT=57, 
		Increment=58, Decrement=59, LShift_Assign=60, RShift_Assign=61, Subtract_Assign=62, 
		Add_Assign=63, Multiply_Assign=64, Divide_Assign=65, Or_Assign=66, Xor_Assign=67, 
		LessEqual=68, GreaterEqual=69, And_Assign=70, Inequal=71, Equal=72, LogicalOr=73, 
		LogicalAnd=74, BitwiseOr=75, BitwiseXor=76, BitwiseAnd=77, BitwiseNot=78, 
		Greater=79, Less=80, Assign=81, Subtract=82, Add=83, Multiply=84, Divide=85, 
		LParenthesis=86, RParenthesis=87, LCurly=88, RCurly=89, Comma=90, Colon=91, 
		Semicolon=92, LSBracket=93, RSBracket=94, Dot=95, Bang=96, DoubleQuote=97, 
		SingleQuote=98, Modulo=99, IDENTIFIER=100, PREPROC_LINE=101, PREPROC_FILE=102, 
		LiteralString=103, LiteralInteger=104, LiteralFloat=105, LiteralBoolean=106, 
		PREPROC_Whitespaces=107, PREPROC_digits=108, PREPROC_define=109, PREPROC_include=110, 
		PREPROC_undef=111, PREPROC_if=112, PREPROC_ifdef=113, PREPROC_ifndef=114, 
		PREPROC_else=115, PREPROC_endif=116, PREPROC_LParenthesis=117, PREPROC_RParenthesis=118, 
		PREPROC_LSBracket=119, PREPROC_RSBracket=120, PREPROC_Comma=121, PREPROC_Add=122, 
		PREPROC_Subtract=123, PREPROC_Semicolon=124, PREPROC_Assign=125;
	public const int
		RULE_computationalStart = 0, RULE_globalDeclaration = 1, RULE_typeDeclaration = 2, 
		RULE_varAndFunctionBlock = 3, RULE_variableDeclaration = 4, RULE_variableDeclarators = 5, 
		RULE_variableDeclarator = 6, RULE_functionDeclaration = 7, RULE_functionParameters = 8, 
		RULE_functionParameter = 9, RULE_classDeclaration = 10, RULE_enumDeclaration = 11, 
		RULE_enumBody = 12, RULE_enumValue = 13, RULE_expression = 14, RULE_castExpression = 15, 
		RULE_primaryExpression = 16, RULE_objectCreation = 17, RULE_functionCall = 18, 
		RULE_parenthesisedExpression = 19, RULE_functionCallParameters = 20, RULE_functionCallParameterList = 21, 
		RULE_functionCallParameter = 22, RULE_optionalParameter = 23, RULE_arrayIndexExpression = 24, 
		RULE_statementSingleOrBlock = 25, RULE_statementBlock = 26, RULE_statement = 27, 
		RULE_gotoStatement = 28, RULE_ifStatement = 29, RULE_elseStatement = 30, 
		RULE_deleteStatement = 31, RULE_forStatement = 32, RULE_foreachStatement = 33, 
		RULE_whileStatement = 34, RULE_switchStatement = 35, RULE_returnStatement = 36, 
		RULE_breakStatement = 37, RULE_continueStatement = 38, RULE_lambdaStatement = 39, 
		RULE_forControl = 40, RULE_typeExtension_Child = 41, RULE_identifier = 42, 
		RULE_expressionList = 43, RULE_arrayIndex = 44, RULE_literalArray = 45, 
		RULE_literalString = 46, RULE_literalInteger = 47, RULE_literalNull = 48, 
		RULE_literalFloat = 49, RULE_literalBoolean = 50, RULE_foreachVariable = 51, 
		RULE_switchLabel = 52, RULE_defaultSwitchLabel = 53, RULE_switchBlockStatementGroup = 54, 
		RULE_emptyBlock = 55, RULE_typedefDeclaration = 56, RULE_typedefType = 57, 
		RULE_keyword = 58, RULE_typeList = 59, RULE_genericType = 60, RULE_genericTypeDeclarationList = 61, 
		RULE_genericTypeDeclaration = 62, RULE_annotation = 63, RULE_classReference = 64, 
		RULE_leftShift = 65, RULE_rightShift = 66, RULE_typeModifer = 67, RULE_variableModifier = 68, 
		RULE_functionModifier = 69;
	public static readonly string[] ruleNames = {
		"computationalStart", "globalDeclaration", "typeDeclaration", "varAndFunctionBlock", 
		"variableDeclaration", "variableDeclarators", "variableDeclarator", "functionDeclaration", 
		"functionParameters", "functionParameter", "classDeclaration", "enumDeclaration", 
		"enumBody", "enumValue", "expression", "castExpression", "primaryExpression", 
		"objectCreation", "functionCall", "parenthesisedExpression", "functionCallParameters", 
		"functionCallParameterList", "functionCallParameter", "optionalParameter", 
		"arrayIndexExpression", "statementSingleOrBlock", "statementBlock", "statement", 
		"gotoStatement", "ifStatement", "elseStatement", "deleteStatement", "forStatement", 
		"foreachStatement", "whileStatement", "switchStatement", "returnStatement", 
		"breakStatement", "continueStatement", "lambdaStatement", "forControl", 
		"typeExtension_Child", "identifier", "expressionList", "arrayIndex", "literalArray", 
		"literalString", "literalInteger", "literalNull", "literalFloat", "literalBoolean", 
		"foreachVariable", "switchLabel", "defaultSwitchLabel", "switchBlockStatementGroup", 
		"emptyBlock", "typedefDeclaration", "typedefType", "keyword", "typeList", 
		"genericType", "genericTypeDeclarationList", "genericTypeDeclaration", 
		"annotation", "classReference", "leftShift", "rightShift", "typeModifer", 
		"variableModifier", "functionModifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'enum'", "'switch'", "'extends'", 
		"'const'", "'break'", "'case'", null, "'for'", "'contine'", "'foreach'", 
		null, "'new'", "'return'", "'this'", "'thread'", "'void'", "'while'", 
		"'autoptr'", "'auto'", "'ref'", "'null'", "'notnull'", "'func'", "'native'", 
		"'volatile'", "'proto'", "'static'", "'owned'", "'reference'", "'out'", 
		"'protected'", "'event'", "'typedef'", "'modded'", "'override'", "'sealed'", 
		"'inout'", "'super'", "'typename'", "'pointer'", "'goto'", "'private'", 
		"'external'", "'delete'", "'local'", "'int'", "'float'", "'bool'", "'string'", 
		"'vector'", "'default'", "'++'", "'--'", "'<<='", "'>>='", "'-='", "'+='", 
		"'*='", "'/='", "'|='", "'^='", "'<='", "'>='", "'&='", "'!='", "'=='", 
		"'||'", "'&&'", "'|'", "'^'", "'&'", "'~'", "'>'", "'<'", null, null, 
		null, "'*'", "'/'", null, null, "'{'", "'}'", null, "':'", null, null, 
		null, "'.'", "'!'", "'\"'", "'''", "'%'", null, "'__LINE__'", "'__FILE__'", 
		null, null, null, null, null, null, "'define'", "'include'", "'undef'", 
		null, "'ifdef'", "'ifndef'", null, "'endif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "CLASS", "ENUM", "SWITCH", "EXTENDS", 
		"CONST", "BREAK", "CASE", "ELSE", "FOR", "CONTINUE", "FOREACH", "IF", 
		"NEW", "RETURN", "THIS", "THREAD", "VOID", "WHILE", "AUTOPTR", "AUTO", 
		"REF", "NULL", "NOTNULL", "FUNC", "NATIVE", "VOLATILE", "PROTO", "STATIC", 
		"OWNED", "REFERENCE", "OUT", "PROTECTED", "EVENT", "TYPEDEF", "MODDED", 
		"OVERRIDE", "SEALED", "INOUT", "SUPER", "TYPENAME", "POINTER", "GOTO", 
		"PRIVATE", "EXTERNAL", "DELETE", "LOCAL", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
		"TYPE_STRING", "TYPE_VECTOR", "DEFAULT", "Increment", "Decrement", "LShift_Assign", 
		"RShift_Assign", "Subtract_Assign", "Add_Assign", "Multiply_Assign", "Divide_Assign", 
		"Or_Assign", "Xor_Assign", "LessEqual", "GreaterEqual", "And_Assign", 
		"Inequal", "Equal", "LogicalOr", "LogicalAnd", "BitwiseOr", "BitwiseXor", 
		"BitwiseAnd", "BitwiseNot", "Greater", "Less", "Assign", "Subtract", "Add", 
		"Multiply", "Divide", "LParenthesis", "RParenthesis", "LCurly", "RCurly", 
		"Comma", "Colon", "Semicolon", "LSBracket", "RSBracket", "Dot", "Bang", 
		"DoubleQuote", "SingleQuote", "Modulo", "IDENTIFIER", "PREPROC_LINE", 
		"PREPROC_FILE", "LiteralString", "LiteralInteger", "LiteralFloat", "LiteralBoolean", 
		"PREPROC_Whitespaces", "PREPROC_digits", "PREPROC_define", "PREPROC_include", 
		"PREPROC_undef", "PREPROC_if", "PREPROC_ifdef", "PREPROC_ifndef", "PREPROC_else", 
		"PREPROC_endif", "PREPROC_LParenthesis", "PREPROC_RParenthesis", "PREPROC_LSBracket", 
		"PREPROC_RSBracket", "PREPROC_Comma", "PREPROC_Add", "PREPROC_Subtract", 
		"PREPROC_Semicolon", "PREPROC_Assign"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnforceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnforceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnforceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnforceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnforceParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
				{
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 140;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 141;
					typeDeclaration();
					}
					break;
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalDeclaration);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclarationContext typedefDeclaration() {
			return GetRuleContext<TypedefDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeDeclaration);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				enumDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				typedefDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAndFunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public VarAndFunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAndFunctionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVarAndFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVarAndFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public VarAndFunctionBlockContext varAndFunctionBlock() {
		VarAndFunctionBlockContext _localctx = new VarAndFunctionBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAndFunctionBlock);
		int _la;
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case VOID:
			case AUTOPTR:
			case AUTO:
			case REF:
			case NOTNULL:
			case FUNC:
			case NATIVE:
			case VOLATILE:
			case PROTO:
			case STATIC:
			case OWNED:
			case REFERENCE:
			case OUT:
			case PROTECTED:
			case EVENT:
			case OVERRIDE:
			case INOUT:
			case TYPENAME:
			case PRIVATE:
			case EXTERNAL:
			case LOCAL:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case LSBracket:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 158;
				globalDeclaration();
				}
				}
				break;
			case LCurly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(LCurly);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
					{
					{
					State = 160;
					globalDeclaration();
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 166;
				Match(RCurly);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ClassReferenceContext variableType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 169;
				annotation();
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 172;
				variableModifier();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			_localctx.variableType = classReference();
			State = 179;
			variableDeclarators();
			State = 180;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			variableDeclarator();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 183;
				Match(Comma);
				State = 184;
				variableDeclarator();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext variableName;
		public ExpressionContext arrayLength;
		public ExpressionContext variableValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_localctx.variableName = identifier();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 191;
				Match(LSBracket);
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
					{
					State = 192;
					_localctx.arrayLength = expression(0);
					}
				}

				State = 195;
				Match(RSBracket);
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 198;
				Match(Assign);
				State = 199;
				_localctx.variableValue = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ClassReferenceContext returnType;
		public IToken deconstructor;
		public IdentifierContext functionName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 202;
				annotation();
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) {
				{
				{
				State = 205;
				functionModifier();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			_localctx.returnType = classReference();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 212;
				Match(LSBracket);
				State = 213;
				Match(RSBracket);
				}
			}

			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitwiseNot) {
				{
				State = 216;
				_localctx.deconstructor = Match(BitwiseNot);
				}
			}

			State = 219;
			_localctx.functionName = identifier();
			State = 220;
			functionParameters();
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 221;
				statementSingleOrBlock();
				}
				break;
			}
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 224;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(LParenthesis);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 228;
				functionParameter();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 229;
					Match(Comma);
					State = 230;
					functionParameter();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 238;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ClassReferenceContext parameterType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 240;
				variableModifier();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			_localctx.parameterType = classReference();
			State = 247;
			variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		public TypeExtension_ChildContext superclass;
		public VarAndFunctionBlockContext classBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationListContext genericTypeDeclarationList() {
			return GetRuleContext<GenericTypeDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAndFunctionBlockContext varAndFunctionBlock() {
			return GetRuleContext<VarAndFunctionBlockContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 249;
				annotation();
				}
			}

			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 252;
				typeModifer();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(CLASS);
			State = 259;
			_localctx.classname = identifier();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 260;
				genericTypeDeclarationList();
				}
			}

			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 263;
				_localctx.superclass = typeExtension_Child();
				}
			}

			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 266;
				_localctx.classBody = varAndFunctionBlock();
				}
				break;
			}
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 269;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public IdentifierContext enumname;
		public TypeExtension_ChildContext superenum;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 272;
				annotation();
				}
			}

			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 275;
				typeModifer();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281;
			Match(ENUM);
			State = 282;
			_localctx.enumname = identifier();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 283;
				_localctx.superenum = typeExtension_Child();
				}
			}

			State = 286;
			enumBody();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 287;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnforceParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnforceParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACES() { return GetTokens(EnforceParser.WHITESPACES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACES(int i) {
			return GetToken(EnforceParser.WHITESPACES, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(LCurly);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 291;
				enumValue();
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 292;
						_la = TokenStream.LA(1);
						if ( !(_la==WHITESPACES || _la==Comma || _la==Semicolon) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 293;
						enumValue();
						}
						} 
					}
					State = 298;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				}
			}

			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 301;
				Match(Comma);
				}
			}

			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 304;
				Match(Semicolon);
				}
			}

			State = 307;
			Match(RCurly);
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 308;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext itemname;
		public ExpressionContext itemValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_localctx.itemname = identifier();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 312;
				Match(Assign);
				State = 313;
				_localctx.itemValue = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IdentifierContext esVariable;
		public ArrayIndexExpressionContext esArrayIndex;
		public FunctionCallContext esFunction;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(EnforceParser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(EnforceParser.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(EnforceParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(EnforceParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(EnforceParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(EnforceParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(EnforceParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(EnforceParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftContext leftShift() {
			return GetRuleContext<LeftShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(EnforceParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(EnforceParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(EnforceParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inequal() { return GetToken(EnforceParser.Inequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(EnforceParser.BitwiseOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(EnforceParser.BitwiseAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(EnforceParser.BitwiseXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd() { return GetToken(EnforceParser.LogicalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr() { return GetToken(EnforceParser.LogicalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(EnforceParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract_Assign() { return GetToken(EnforceParser.Subtract_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply_Assign() { return GetToken(EnforceParser.Multiply_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide_Assign() { return GetToken(EnforceParser.Divide_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or_Assign() { return GetToken(EnforceParser.Or_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And_Assign() { return GetToken(EnforceParser.And_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LShift_Assign() { return GetToken(EnforceParser.LShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RShift_Assign() { return GetToken(EnforceParser.RShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(EnforceParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 317;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 318;
				Match(THIS);
				}
				break;
			case 3:
				{
				State = 319;
				Match(SUPER);
				}
				break;
			case 4:
				{
				State = 320;
				objectCreation();
				}
				break;
			case 5:
				{
				State = 321;
				castExpression();
				}
				break;
			case 6:
				{
				State = 322;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (Increment - 58)) | (1L << (Decrement - 58)) | (1L << (BitwiseNot - 58)) | (1L << (Subtract - 58)) | (1L << (Add - 58)) | (1L << (Bang - 58)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 323;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 364;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 326;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 327;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Multiply - 84)) | (1L << (Divide - 84)) | (1L << (Modulo - 84)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 328;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 329;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 330;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Subtract || _la==Add) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 331;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 333;
						rightShift();
						State = 334;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 337;
						leftShift();
						State = 338;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 341;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LessEqual - 68)) | (1L << (GreaterEqual - 68)) | (1L << (Greater - 68)) | (1L << (Less - 68)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 342;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 343;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 344;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Inequal || _la==Equal) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 345;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 347;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (BitwiseOr - 75)) | (1L << (BitwiseXor - 75)) | (1L << (BitwiseAnd - 75)) | (1L << (BitwiseNot - 75)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 348;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 350;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LogicalOr || _la==LogicalAnd) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 351;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 353;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (LShift_Assign - 60)) | (1L << (RShift_Assign - 60)) | (1L << (Subtract_Assign - 60)) | (1L << (Add_Assign - 60)) | (1L << (Multiply_Assign - 60)) | (1L << (Divide_Assign - 60)) | (1L << (Or_Assign - 60)) | (1L << (And_Assign - 60)) | (1L << (Assign - 60)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 354;
						expression(1);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 355;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 356;
						_localctx.op = Match(Dot);
						State = 360;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
						case 1:
							{
							State = 357;
							_localctx.esVariable = identifier();
							}
							break;
						case 2:
							{
							State = 358;
							_localctx.esArrayIndex = arrayIndexExpression();
							}
							break;
						case 3:
							{
							State = 359;
							_localctx.esFunction = functionCall();
							}
							break;
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 362;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 363;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Increment || _la==Decrement) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public ClassReferenceContext cast;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_castExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(LParenthesis);
			State = 370;
			_localctx.cast = classReference();
			State = 371;
			Match(RParenthesis);
			State = 372;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public FunctionCallContext esFunction;
		public LiteralStringContext esString;
		public LiteralIntegerContext esInt;
		public LiteralFloatContext esFloat;
		public LiteralBooleanContext esBool;
		public ParenthesisedExpressionContext parExpression;
		public LiteralArrayContext esArray;
		public LiteralNullContext esNull;
		public IdentifierContext esVariable;
		public ClassReferenceContext esGeneric;
		public ArrayIndexExpressionContext esArrayIndex;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_primaryExpression);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374;
				_localctx.esFunction = functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				_localctx.esString = literalString();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376;
				_localctx.esInt = literalInteger();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 377;
				_localctx.esFloat = literalFloat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 378;
				_localctx.esBool = literalBoolean();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 379;
				_localctx.parExpression = parenthesisedExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 380;
				_localctx.esArray = literalArray();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 381;
				_localctx.esNull = literalNull();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 382;
				_localctx.esVariable = identifier();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 383;
				_localctx.esGeneric = classReference();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 384;
				_localctx.esArrayIndex = arrayIndexExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		public IdentifierContext objectName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 34, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(NEW);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 388;
				variableModifier();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			_localctx.objectName = identifier();
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 395;
				typeList();
				}
				break;
			}
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 398;
				functionCallParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			identifier();
			State = 402;
			functionCallParameters();
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 403;
				Match(LSBracket);
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
					{
					State = 404;
					expression(0);
					}
				}

				State = 407;
				Match(RSBracket);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		public ParenthesisedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParenthesisedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParenthesisedExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisedExpressionContext parenthesisedExpression() {
		ParenthesisedExpressionContext _localctx = new ParenthesisedExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_parenthesisedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(LParenthesis);
			State = 411;
			expression(0);
			State = 412;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterListContext functionCallParameterList() {
			return GetRuleContext<FunctionCallParameterListContext>(0);
		}
		public FunctionCallParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParametersContext functionCallParameters() {
		FunctionCallParametersContext _localctx = new FunctionCallParametersContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionCallParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(LParenthesis);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
				{
				State = 415;
				functionCallParameterList();
				}
			}

			State = 418;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext[] functionCallParameter() {
			return GetRuleContexts<FunctionCallParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext functionCallParameter(int i) {
			return GetRuleContext<FunctionCallParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionCallParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterListContext functionCallParameterList() {
		FunctionCallParameterListContext _localctx = new FunctionCallParameterListContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCallParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			functionCallParameter();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 421;
				Match(Comma);
				State = 422;
				functionCallParameter();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public FunctionCallParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterContext functionCallParameter() {
		FunctionCallParameterContext _localctx = new FunctionCallParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCallParameter);
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		public IdentifierContext argumentName;
		public ExpressionContext argumentValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_optionalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_localctx.argumentName = identifier();
			State = 433;
			Match(Colon);
			State = 434;
			_localctx.argumentValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext[] arrayIndex() {
			return GetRuleContexts<ArrayIndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex(int i) {
			return GetRuleContext<ArrayIndexContext>(i);
		}
		public ArrayIndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndexExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexExpressionContext arrayIndexExpression() {
		ArrayIndexExpressionContext _localctx = new ArrayIndexExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayIndexExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			identifier();
			State = 440;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 437;
					arrayIndex();
					}
					} 
				}
				State = 442;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSingleOrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public StatementSingleOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSingleOrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementSingleOrBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementSingleOrBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementSingleOrBlockContext statementSingleOrBlock() {
		StatementSingleOrBlockContext _localctx = new StatementSingleOrBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_statementSingleOrBlock);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444;
				statementBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockContext emptyBlock() {
			return GetRuleContext<EmptyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_statementBlock);
		int _la;
		try {
			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				emptyBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(LCurly);
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Semicolon - 78)) | (1L << (LSBracket - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
					{
					{
					State = 449;
					statement();
					}
					}
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 455;
				Match(RCurly);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expressionaryStatement;
		public VariableDeclarationContext esVariableDeclaration;
		public DeleteStatementContext esDelete;
		public IfStatementContext esIf;
		public ForStatementContext esFor;
		public ForeachStatementContext esForEach;
		public WhileStatementContext esWhile;
		public SwitchStatementContext esSwitch;
		public ReturnStatementContext esReturn;
		public BreakStatementContext esBreak;
		public ContinueStatementContext esContinue;
		public StatementBlockContext esStatementBlock;
		public GotoStatementContext esGoto;
		public LambdaStatementContext esLambda;
		public IToken esSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaStatementContext lambdaStatement() {
			return GetRuleContext<LambdaStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 458;
				_localctx.expressionaryStatement = expression(0);
				State = 459;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				_localctx.esVariableDeclaration = variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 462;
				_localctx.esDelete = deleteStatement();
				State = 463;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 465;
				_localctx.esIf = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 466;
				_localctx.esFor = forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 467;
				_localctx.esForEach = foreachStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 468;
				_localctx.esWhile = whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 469;
				_localctx.esSwitch = switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 470;
				_localctx.esReturn = returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 471;
				_localctx.esBreak = breakStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 472;
				_localctx.esContinue = continueStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 473;
				_localctx.esStatementBlock = statementBlock();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 474;
				_localctx.esGoto = gotoStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 475;
				_localctx.esLambda = lambdaStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 476;
				_localctx.esSemicolon = Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(GOTO);
			State = 480;
			expression(0);
			State = 481;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext ifBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(IF);
			State = 484;
			_localctx.condition = parenthesisedExpression();
			State = 485;
			_localctx.ifBody = statementSingleOrBlock();
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 486;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext elseBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(ELSE);
			State = 490;
			_localctx.elseBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(DELETE);
			State = 493;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(FOR);
			State = 496;
			Match(LParenthesis);
			State = 497;
			forControl();
			State = 498;
			Match(RParenthesis);
			State = 499;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public ExpressionContext enumerating;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachVariableContext[] foreachVariable() {
			return GetRuleContexts<ForeachVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachVariableContext foreachVariable(int i) {
			return GetRuleContext<ForeachVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(FOREACH);
			State = 502;
			Match(LParenthesis);
			State = 503;
			foreachVariable();
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 504;
				Match(Comma);
				State = 505;
				foreachVariable();
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 511;
			Match(Colon);
			State = 512;
			_localctx.enumerating = expression(0);
			State = 513;
			Match(RParenthesis);
			State = 514;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(WHILE);
			State = 517;
			_localctx.condition = parenthesisedExpression();
			State = 518;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(SWITCH);
			State = 521;
			parenthesisedExpression();
			State = 522;
			Match(LCurly);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 523;
				switchBlockStatementGroup();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 529;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(RETURN);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
				{
				State = 532;
				expression(0);
				}
			}

			State = 535;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(BREAK);
			State = 538;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(CONTINUE);
			State = 541;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaStatementContext : ParserRuleContext {
		public ClassReferenceContext lambdaType;
		public IdentifierContext lambdaName;
		public FunctionCallParametersContext lambdaArguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public LambdaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLambdaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLambdaStatement(this);
		}
	}

	[RuleVersion(0)]
	public LambdaStatementContext lambdaStatement() {
		LambdaStatementContext _localctx = new LambdaStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_lambdaStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			_localctx.lambdaType = classReference();
			State = 544;
			_localctx.lambdaName = identifier();
			State = 545;
			_localctx.lambdaArguments = functionCallParameters();
			State = 546;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public StatementContext forInit;
		public ExpressionContext forCondition;
		public ExpressionContext forIteration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnforceParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnforceParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 80, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			_localctx.forInit = statement();
			State = 549;
			_localctx.forCondition = expression(0);
			State = 550;
			Match(Semicolon);
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
				{
				State = 551;
				_localctx.forIteration = expression(0);
				}
			}

			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Semicolon) {
				{
				{
				State = 554;
				Match(Semicolon);
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtension_ChildContext : ParserRuleContext {
		public IToken extends;
		public ClassReferenceContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		public TypeExtension_ChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension_Child; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeExtension_Child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeExtension_Child(this);
		}
	}

	[RuleVersion(0)]
	public TypeExtension_ChildContext typeExtension_Child() {
		TypeExtension_ChildContext _localctx = new TypeExtension_ChildContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeExtension_Child);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			_localctx.extends = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDS || _la==Colon) ) {
				_localctx.extends = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 561;
			_localctx.classname = classReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 86, RULE_expressionList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			expression(0);
			State = 570;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 566;
					Match(Comma);
					State = 567;
					expression(0);
					}
					} 
				}
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 573;
				Match(Comma);
				}
				}
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndex(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(LSBracket);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
				{
				State = 580;
				expression(0);
				}
			}

			State = 583;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 90, RULE_literalArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(LCurly);
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
				{
				State = 586;
				expressionList();
				}
			}

			State = 589;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(EnforceParser.LiteralString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_LINE() { return GetToken(EnforceParser.PREPROC_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_FILE() { return GetToken(EnforceParser.PREPROC_FILE, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 92, RULE_literalString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (PREPROC_LINE - 101)) | (1L << (PREPROC_FILE - 101)) | (1L << (LiteralString - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(EnforceParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 94, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 96, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(EnforceParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 98, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 100, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(LiteralBoolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachVariableContext : ParserRuleContext {
		public ClassReferenceContext iteratedVariableType;
		public IdentifierContext iteratedVariableName;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ForeachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachVariable(this);
		}
	}

	[RuleVersion(0)]
	public ForeachVariableContext foreachVariable() {
		ForeachVariableContext _localctx = new ForeachVariableContext(Context, State);
		EnterRule(_localctx, 102, RULE_foreachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			_localctx.iteratedVariableType = classReference();
			State = 602;
			_localctx.iteratedVariableName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 104, RULE_switchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(CASE);
			{
			State = 605;
			expression(0);
			}
			State = 606;
			Match(Colon);
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Semicolon - 78)) | (1L << (LSBracket - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
					{
					{
					State = 607;
					statement();
					}
					}
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 613;
				statementSingleOrBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultSwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultSwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultSwitchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDefaultSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDefaultSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public DefaultSwitchLabelContext defaultSwitchLabel() {
		DefaultSwitchLabelContext _localctx = new DefaultSwitchLabelContext(Context, State);
		EnterRule(_localctx, 106, RULE_defaultSwitchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(DEFAULT);
			State = 617;
			Match(Colon);
			State = 625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (BitwiseNot - 78)) | (1L << (Subtract - 78)) | (1L << (Add - 78)) | (1L << (LParenthesis - 78)) | (1L << (LCurly - 78)) | (1L << (Semicolon - 78)) | (1L << (LSBracket - 78)) | (1L << (Bang - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (PREPROC_LINE - 78)) | (1L << (PREPROC_FILE - 78)) | (1L << (LiteralString - 78)) | (1L << (LiteralInteger - 78)) | (1L << (LiteralFloat - 78)) | (1L << (LiteralBoolean - 78)))) != 0)) {
					{
					{
					State = 618;
					statement();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 624;
				statementSingleOrBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel() {
			return GetRuleContext<SwitchLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultSwitchLabelContext defaultSwitchLabel() {
			return GetRuleContext<DefaultSwitchLabelContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 108, RULE_switchBlockStatementGroup);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				switchLabel();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				defaultSwitchLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public EmptyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEmptyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEmptyBlock(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockContext emptyBlock() {
		EmptyBlockContext _localctx = new EmptyBlockContext(Context, State);
		EnterRule(_localctx, 110, RULE_emptyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(LCurly);
			State = 632;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclarationContext : ParserRuleContext {
		public TypedefTypeContext fromType;
		public IdentifierContext toType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedefTypeContext typedefType() {
			return GetRuleContext<TypedefTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public TypedefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclarationContext typedefDeclaration() {
		TypedefDeclarationContext _localctx = new TypedefDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_typedefDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 634;
				annotation();
				}
			}

			State = 637;
			Match(TYPEDEF);
			State = 638;
			_localctx.fromType = typedefType();
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 639;
				Match(LSBracket);
				State = 640;
				Match(RSBracket);
				}
			}

			State = 643;
			_localctx.toType = identifier();
			State = 644;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		public TypedefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefTypeContext typedefType() {
		TypedefTypeContext _localctx = new TypedefTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_typedefType);
		try {
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647;
				classReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(EnforceParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(EnforceParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 116, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << SWITCH) | (1L << EXTENDS) | (1L << CONST) | (1L << BREAK) | (1L << CASE) | (1L << ELSE) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << POINTER) | (1L << GOTO) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << DEFAULT))) != 0) || _la==LiteralBoolean) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext[] genericType() {
			return GetRuleContexts<GenericTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType(int i) {
			return GetRuleContext<GenericTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 118, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(Less);
			State = 653;
			genericType();
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 654;
				Match(Comma);
				State = 655;
				genericType();
				}
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 661;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public ClassReferenceContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_genericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 663;
				variableModifier();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 669;
			_localctx.type = classReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext[] genericTypeDeclaration() {
			return GetRuleContexts<GenericTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext genericTypeDeclaration(int i) {
			return GetRuleContext<GenericTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public GenericTypeDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationListContext genericTypeDeclarationList() {
		GenericTypeDeclarationListContext _localctx = new GenericTypeDeclarationListContext(Context, State);
		EnterRule(_localctx, 122, RULE_genericTypeDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(Less);
			State = 672;
			genericTypeDeclaration();
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 673;
				Match(Comma);
				State = 674;
				genericTypeDeclaration();
				}
				}
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 680;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationContext : ParserRuleContext {
		public ClassReferenceContext type;
		public IdentifierContext typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public GenericTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationContext genericTypeDeclaration() {
		GenericTypeDeclarationContext _localctx = new GenericTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_genericTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 682;
				variableModifier();
				}
				}
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 688;
			_localctx.type = classReference();
			State = 689;
			_localctx.typeName = identifier();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 690;
				Match(LSBracket);
				State = 691;
				Match(RSBracket);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(LSBracket);
			State = 695;
			functionCall();
			State = 696;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassReferenceContext : ParserRuleContext {
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext[] arrayIndex() {
			return GetRuleContexts<ArrayIndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex(int i) {
			return GetRuleContext<ArrayIndexContext>(i);
		}
		public ClassReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassReference(this);
		}
	}

	[RuleVersion(0)]
	public ClassReferenceContext classReference() {
		ClassReferenceContext _localctx = new ClassReferenceContext(Context, State);
		EnterRule(_localctx, 128, RULE_classReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			_localctx.classname = identifier();
			State = 700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 699;
				typeList();
				}
				break;
			}
			State = 705;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 702;
					arrayIndex();
					}
					} 
				}
				State = 707;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(EnforceParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(EnforceParser.Less, i);
		}
		public LeftShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLeftShift(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftContext leftShift() {
		LeftShiftContext _localctx = new LeftShiftContext(Context, State);
		EnterRule(_localctx, 130, RULE_leftShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(Less);
			State = 709;
			Match(Less);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(EnforceParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(EnforceParser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 132, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			Match(Greater);
			State = 712;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModiferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		public TypeModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeModifer(this);
		}
	}

	[RuleVersion(0)]
	public TypeModiferContext typeModifer() {
		TypeModiferContext _localctx = new TypeModiferContext(Context, State);
		EnterRule(_localctx, 134, RULE_typeModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			_la = TokenStream.LA(1);
			if ( !(_la==MODDED || _la==SEALED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,125,721,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,5,
		0,143,8,0,10,0,12,0,146,9,0,1,0,1,0,1,1,1,1,3,1,152,8,1,1,2,1,2,1,2,3,
		2,157,8,2,1,3,1,3,1,3,5,3,162,8,3,10,3,12,3,165,9,3,1,3,3,3,168,8,3,1,
		4,3,4,171,8,4,1,4,5,4,174,8,4,10,4,12,4,177,9,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,5,5,186,8,5,10,5,12,5,189,9,5,1,6,1,6,1,6,3,6,194,8,6,1,6,3,6,197,
		8,6,1,6,1,6,3,6,201,8,6,1,7,3,7,204,8,7,1,7,5,7,207,8,7,10,7,12,7,210,
		9,7,1,7,1,7,1,7,3,7,215,8,7,1,7,3,7,218,8,7,1,7,1,7,1,7,3,7,223,8,7,1,
		7,3,7,226,8,7,1,8,1,8,1,8,1,8,5,8,232,8,8,10,8,12,8,235,9,8,3,8,237,8,
		8,1,8,1,8,1,9,5,9,242,8,9,10,9,12,9,245,9,9,1,9,1,9,1,9,1,10,3,10,251,
		8,10,1,10,5,10,254,8,10,10,10,12,10,257,9,10,1,10,1,10,1,10,3,10,262,8,
		10,1,10,3,10,265,8,10,1,10,3,10,268,8,10,1,10,3,10,271,8,10,1,11,3,11,
		274,8,11,1,11,5,11,277,8,11,10,11,12,11,280,9,11,1,11,1,11,1,11,3,11,285,
		8,11,1,11,1,11,3,11,289,8,11,1,12,1,12,1,12,1,12,5,12,295,8,12,10,12,12,
		12,298,9,12,3,12,300,8,12,1,12,3,12,303,8,12,1,12,3,12,306,8,12,1,12,1,
		12,3,12,310,8,12,1,13,1,13,1,13,3,13,315,8,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,3,14,325,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,361,8,14,
		1,14,1,14,5,14,365,8,14,10,14,12,14,368,9,14,1,15,1,15,1,15,1,15,1,15,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,386,8,16,1,
		17,1,17,5,17,390,8,17,10,17,12,17,393,9,17,1,17,1,17,3,17,397,8,17,1,17,
		3,17,400,8,17,1,18,1,18,1,18,1,18,3,18,406,8,18,1,18,3,18,409,8,18,1,19,
		1,19,1,19,1,19,1,20,1,20,3,20,417,8,20,1,20,1,20,1,21,1,21,1,21,5,21,424,
		8,21,10,21,12,21,427,9,21,1,22,1,22,3,22,431,8,22,1,23,1,23,1,23,1,23,
		1,24,1,24,5,24,439,8,24,10,24,12,24,442,9,24,1,25,1,25,3,25,446,8,25,1,
		26,1,26,1,26,5,26,451,8,26,10,26,12,26,454,9,26,1,26,3,26,457,8,26,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,3,27,478,8,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
		29,3,29,488,8,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
		1,32,1,33,1,33,1,33,1,33,1,33,5,33,507,8,33,10,33,12,33,510,9,33,1,33,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,525,8,
		35,10,35,12,35,528,9,35,1,35,1,35,1,36,1,36,3,36,534,8,36,1,36,1,36,1,
		37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
		40,3,40,553,8,40,1,40,5,40,556,8,40,10,40,12,40,559,9,40,1,41,1,41,1,41,
		1,42,1,42,1,43,1,43,1,43,5,43,569,8,43,10,43,12,43,572,9,43,1,43,5,43,
		575,8,43,10,43,12,43,578,9,43,1,44,1,44,3,44,582,8,44,1,44,1,44,1,45,1,
		45,3,45,588,8,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
		1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,609,8,52,10,52,12,52,612,
		9,52,1,52,3,52,615,8,52,1,53,1,53,1,53,5,53,620,8,53,10,53,12,53,623,9,
		53,1,53,3,53,626,8,53,1,54,1,54,3,54,630,8,54,1,55,1,55,1,55,1,56,3,56,
		636,8,56,1,56,1,56,1,56,1,56,3,56,642,8,56,1,56,1,56,1,56,1,57,1,57,3,
		57,649,8,57,1,58,1,58,1,59,1,59,1,59,1,59,5,59,657,8,59,10,59,12,59,660,
		9,59,1,59,1,59,1,60,5,60,665,8,60,10,60,12,60,668,9,60,1,60,1,60,1,61,
		1,61,1,61,1,61,5,61,676,8,61,10,61,12,61,679,9,61,1,61,1,61,1,62,5,62,
		684,8,62,10,62,12,62,687,9,62,1,62,1,62,1,62,1,62,3,62,693,8,62,1,63,1,
		63,1,63,1,63,1,64,1,64,3,64,701,8,64,1,64,5,64,704,8,64,10,64,12,64,707,
		9,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,
		0,1,28,70,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
		130,132,134,136,138,0,17,3,0,5,5,90,90,92,92,4,0,58,59,78,78,82,83,96,
		96,2,0,84,85,99,99,1,0,82,83,2,0,68,69,79,80,1,0,71,72,1,0,75,78,1,0,73,
		74,3,0,60,66,70,70,81,81,1,0,58,59,2,0,9,9,91,91,6,0,22,22,25,25,29,29,
		45,45,52,56,100,100,1,0,101,103,2,0,6,57,106,106,2,0,40,40,42,42,8,0,10,
		10,24,24,26,26,28,28,32,37,43,43,48,48,51,51,5,0,26,26,30,35,37,38,41,
		41,48,49,767,0,144,1,0,0,0,2,151,1,0,0,0,4,156,1,0,0,0,6,167,1,0,0,0,8,
		170,1,0,0,0,10,182,1,0,0,0,12,190,1,0,0,0,14,203,1,0,0,0,16,227,1,0,0,
		0,18,243,1,0,0,0,20,250,1,0,0,0,22,273,1,0,0,0,24,290,1,0,0,0,26,311,1,
		0,0,0,28,324,1,0,0,0,30,369,1,0,0,0,32,385,1,0,0,0,34,387,1,0,0,0,36,401,
		1,0,0,0,38,410,1,0,0,0,40,414,1,0,0,0,42,420,1,0,0,0,44,430,1,0,0,0,46,
		432,1,0,0,0,48,436,1,0,0,0,50,445,1,0,0,0,52,456,1,0,0,0,54,477,1,0,0,
		0,56,479,1,0,0,0,58,483,1,0,0,0,60,489,1,0,0,0,62,492,1,0,0,0,64,495,1,
		0,0,0,66,501,1,0,0,0,68,516,1,0,0,0,70,520,1,0,0,0,72,531,1,0,0,0,74,537,
		1,0,0,0,76,540,1,0,0,0,78,543,1,0,0,0,80,548,1,0,0,0,82,560,1,0,0,0,84,
		563,1,0,0,0,86,565,1,0,0,0,88,579,1,0,0,0,90,585,1,0,0,0,92,591,1,0,0,
		0,94,593,1,0,0,0,96,595,1,0,0,0,98,597,1,0,0,0,100,599,1,0,0,0,102,601,
		1,0,0,0,104,604,1,0,0,0,106,616,1,0,0,0,108,629,1,0,0,0,110,631,1,0,0,
		0,112,635,1,0,0,0,114,648,1,0,0,0,116,650,1,0,0,0,118,652,1,0,0,0,120,
		666,1,0,0,0,122,671,1,0,0,0,124,685,1,0,0,0,126,694,1,0,0,0,128,698,1,
		0,0,0,130,708,1,0,0,0,132,711,1,0,0,0,134,714,1,0,0,0,136,716,1,0,0,0,
		138,718,1,0,0,0,140,143,3,2,1,0,141,143,3,4,2,0,142,140,1,0,0,0,142,141,
		1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,
		0,146,144,1,0,0,0,147,148,5,0,0,1,148,1,1,0,0,0,149,152,3,8,4,0,150,152,
		3,14,7,0,151,149,1,0,0,0,151,150,1,0,0,0,152,3,1,0,0,0,153,157,3,20,10,
		0,154,157,3,22,11,0,155,157,3,112,56,0,156,153,1,0,0,0,156,154,1,0,0,0,
		156,155,1,0,0,0,157,5,1,0,0,0,158,168,3,2,1,0,159,163,5,88,0,0,160,162,
		3,2,1,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,
		0,164,166,1,0,0,0,165,163,1,0,0,0,166,168,5,89,0,0,167,158,1,0,0,0,167,
		159,1,0,0,0,168,7,1,0,0,0,169,171,3,126,63,0,170,169,1,0,0,0,170,171,1,
		0,0,0,171,175,1,0,0,0,172,174,3,136,68,0,173,172,1,0,0,0,174,177,1,0,0,
		0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,
		179,3,128,64,0,179,180,3,10,5,0,180,181,5,92,0,0,181,9,1,0,0,0,182,187,
		3,12,6,0,183,184,5,90,0,0,184,186,3,12,6,0,185,183,1,0,0,0,186,189,1,0,
		0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,11,1,0,0,0,189,187,1,0,0,0,190,
		196,3,84,42,0,191,193,5,93,0,0,192,194,3,28,14,0,193,192,1,0,0,0,193,194,
		1,0,0,0,194,195,1,0,0,0,195,197,5,94,0,0,196,191,1,0,0,0,196,197,1,0,0,
		0,197,200,1,0,0,0,198,199,5,81,0,0,199,201,3,28,14,0,200,198,1,0,0,0,200,
		201,1,0,0,0,201,13,1,0,0,0,202,204,3,126,63,0,203,202,1,0,0,0,203,204,
		1,0,0,0,204,208,1,0,0,0,205,207,3,138,69,0,206,205,1,0,0,0,207,210,1,0,
		0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,
		214,3,128,64,0,212,213,5,93,0,0,213,215,5,94,0,0,214,212,1,0,0,0,214,215,
		1,0,0,0,215,217,1,0,0,0,216,218,5,78,0,0,217,216,1,0,0,0,217,218,1,0,0,
		0,218,219,1,0,0,0,219,220,3,84,42,0,220,222,3,16,8,0,221,223,3,50,25,0,
		222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,226,5,92,0,0,225,224,
		1,0,0,0,225,226,1,0,0,0,226,15,1,0,0,0,227,236,5,86,0,0,228,233,3,18,9,
		0,229,230,5,90,0,0,230,232,3,18,9,0,231,229,1,0,0,0,232,235,1,0,0,0,233,
		231,1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,236,228,1,
		0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,5,87,0,0,239,17,1,0,0,0,
		240,242,3,136,68,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
		244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,3,128,64,0,247,248,
		3,12,6,0,248,19,1,0,0,0,249,251,3,126,63,0,250,249,1,0,0,0,250,251,1,0,
		0,0,251,255,1,0,0,0,252,254,3,134,67,0,253,252,1,0,0,0,254,257,1,0,0,0,
		255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,
		5,6,0,0,259,261,3,84,42,0,260,262,3,122,61,0,261,260,1,0,0,0,261,262,1,
		0,0,0,262,264,1,0,0,0,263,265,3,82,41,0,264,263,1,0,0,0,264,265,1,0,0,
		0,265,267,1,0,0,0,266,268,3,6,3,0,267,266,1,0,0,0,267,268,1,0,0,0,268,
		270,1,0,0,0,269,271,5,92,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,21,1,
		0,0,0,272,274,3,126,63,0,273,272,1,0,0,0,273,274,1,0,0,0,274,278,1,0,0,
		0,275,277,3,134,67,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,
		279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,5,7,0,0,282,284,3,
		84,42,0,283,285,3,82,41,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,
		0,0,286,288,3,24,12,0,287,289,5,92,0,0,288,287,1,0,0,0,288,289,1,0,0,0,
		289,23,1,0,0,0,290,299,5,88,0,0,291,296,3,26,13,0,292,293,7,0,0,0,293,
		295,3,26,13,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,
		1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,299,291,1,0,0,0,299,300,1,0,0,
		0,300,302,1,0,0,0,301,303,5,90,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
		305,1,0,0,0,304,306,5,92,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,
		0,0,0,307,309,5,89,0,0,308,310,5,92,0,0,309,308,1,0,0,0,309,310,1,0,0,
		0,310,25,1,0,0,0,311,314,3,84,42,0,312,313,5,81,0,0,313,315,3,28,14,0,
		314,312,1,0,0,0,314,315,1,0,0,0,315,27,1,0,0,0,316,317,6,14,-1,0,317,325,
		3,32,16,0,318,325,5,20,0,0,319,325,5,44,0,0,320,325,3,34,17,0,321,325,
		3,30,15,0,322,323,7,1,0,0,323,325,3,28,14,10,324,316,1,0,0,0,324,318,1,
		0,0,0,324,319,1,0,0,0,324,320,1,0,0,0,324,321,1,0,0,0,324,322,1,0,0,0,
		325,366,1,0,0,0,326,327,10,9,0,0,327,328,7,2,0,0,328,365,3,28,14,10,329,
		330,10,8,0,0,330,331,7,3,0,0,331,365,3,28,14,9,332,333,10,7,0,0,333,334,
		3,132,66,0,334,335,3,28,14,8,335,365,1,0,0,0,336,337,10,6,0,0,337,338,
		3,130,65,0,338,339,3,28,14,7,339,365,1,0,0,0,340,341,10,5,0,0,341,342,
		7,4,0,0,342,365,3,28,14,6,343,344,10,4,0,0,344,345,7,5,0,0,345,365,3,28,
		14,5,346,347,10,3,0,0,347,348,7,6,0,0,348,365,3,28,14,4,349,350,10,2,0,
		0,350,351,7,7,0,0,351,365,3,28,14,3,352,353,10,1,0,0,353,354,7,8,0,0,354,
		365,3,28,14,1,355,356,10,14,0,0,356,360,5,95,0,0,357,361,3,84,42,0,358,
		361,3,48,24,0,359,361,3,36,18,0,360,357,1,0,0,0,360,358,1,0,0,0,360,359,
		1,0,0,0,361,365,1,0,0,0,362,363,10,11,0,0,363,365,7,9,0,0,364,326,1,0,
		0,0,364,329,1,0,0,0,364,332,1,0,0,0,364,336,1,0,0,0,364,340,1,0,0,0,364,
		343,1,0,0,0,364,346,1,0,0,0,364,349,1,0,0,0,364,352,1,0,0,0,364,355,1,
		0,0,0,364,362,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,
		367,29,1,0,0,0,368,366,1,0,0,0,369,370,5,86,0,0,370,371,3,128,64,0,371,
		372,5,87,0,0,372,373,3,28,14,0,373,31,1,0,0,0,374,386,3,36,18,0,375,386,
		3,92,46,0,376,386,3,94,47,0,377,386,3,98,49,0,378,386,3,100,50,0,379,386,
		3,38,19,0,380,386,3,90,45,0,381,386,3,96,48,0,382,386,3,84,42,0,383,386,
		3,128,64,0,384,386,3,48,24,0,385,374,1,0,0,0,385,375,1,0,0,0,385,376,1,
		0,0,0,385,377,1,0,0,0,385,378,1,0,0,0,385,379,1,0,0,0,385,380,1,0,0,0,
		385,381,1,0,0,0,385,382,1,0,0,0,385,383,1,0,0,0,385,384,1,0,0,0,386,33,
		1,0,0,0,387,391,5,18,0,0,388,390,3,136,68,0,389,388,1,0,0,0,390,393,1,
		0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,
		394,396,3,84,42,0,395,397,3,118,59,0,396,395,1,0,0,0,396,397,1,0,0,0,397,
		399,1,0,0,0,398,400,3,40,20,0,399,398,1,0,0,0,399,400,1,0,0,0,400,35,1,
		0,0,0,401,402,3,84,42,0,402,408,3,40,20,0,403,405,5,93,0,0,404,406,3,28,
		14,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,409,5,94,0,0,
		408,403,1,0,0,0,408,409,1,0,0,0,409,37,1,0,0,0,410,411,5,86,0,0,411,412,
		3,28,14,0,412,413,5,87,0,0,413,39,1,0,0,0,414,416,5,86,0,0,415,417,3,42,
		21,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,5,87,0,0,
		419,41,1,0,0,0,420,425,3,44,22,0,421,422,5,90,0,0,422,424,3,44,22,0,423,
		421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,43,1,0,
		0,0,427,425,1,0,0,0,428,431,3,28,14,0,429,431,3,46,23,0,430,428,1,0,0,
		0,430,429,1,0,0,0,431,45,1,0,0,0,432,433,3,84,42,0,433,434,5,91,0,0,434,
		435,3,28,14,0,435,47,1,0,0,0,436,440,3,84,42,0,437,439,3,88,44,0,438,437,
		1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,49,1,0,0,0,
		442,440,1,0,0,0,443,446,3,54,27,0,444,446,3,52,26,0,445,443,1,0,0,0,445,
		444,1,0,0,0,446,51,1,0,0,0,447,457,3,110,55,0,448,452,5,88,0,0,449,451,
		3,54,27,0,450,449,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,
		0,0,453,455,1,0,0,0,454,452,1,0,0,0,455,457,5,89,0,0,456,447,1,0,0,0,456,
		448,1,0,0,0,457,53,1,0,0,0,458,459,3,28,14,0,459,460,5,92,0,0,460,478,
		1,0,0,0,461,478,3,8,4,0,462,463,3,62,31,0,463,464,5,92,0,0,464,478,1,0,
		0,0,465,478,3,58,29,0,466,478,3,64,32,0,467,478,3,66,33,0,468,478,3,68,
		34,0,469,478,3,70,35,0,470,478,3,72,36,0,471,478,3,74,37,0,472,478,3,76,
		38,0,473,478,3,52,26,0,474,478,3,56,28,0,475,478,3,78,39,0,476,478,5,92,
		0,0,477,458,1,0,0,0,477,461,1,0,0,0,477,462,1,0,0,0,477,465,1,0,0,0,477,
		466,1,0,0,0,477,467,1,0,0,0,477,468,1,0,0,0,477,469,1,0,0,0,477,470,1,
		0,0,0,477,471,1,0,0,0,477,472,1,0,0,0,477,473,1,0,0,0,477,474,1,0,0,0,
		477,475,1,0,0,0,477,476,1,0,0,0,478,55,1,0,0,0,479,480,5,47,0,0,480,481,
		3,28,14,0,481,482,5,92,0,0,482,57,1,0,0,0,483,484,5,17,0,0,484,485,3,38,
		19,0,485,487,3,50,25,0,486,488,3,60,30,0,487,486,1,0,0,0,487,488,1,0,0,
		0,488,59,1,0,0,0,489,490,5,13,0,0,490,491,3,50,25,0,491,61,1,0,0,0,492,
		493,5,50,0,0,493,494,3,28,14,0,494,63,1,0,0,0,495,496,5,14,0,0,496,497,
		5,86,0,0,497,498,3,80,40,0,498,499,5,87,0,0,499,500,3,50,25,0,500,65,1,
		0,0,0,501,502,5,16,0,0,502,503,5,86,0,0,503,508,3,102,51,0,504,505,5,90,
		0,0,505,507,3,102,51,0,506,504,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,
		508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,5,91,0,0,512,513,
		3,28,14,0,513,514,5,87,0,0,514,515,3,50,25,0,515,67,1,0,0,0,516,517,5,
		23,0,0,517,518,3,38,19,0,518,519,3,50,25,0,519,69,1,0,0,0,520,521,5,8,
		0,0,521,522,3,38,19,0,522,526,5,88,0,0,523,525,3,108,54,0,524,523,1,0,
		0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,
		526,1,0,0,0,529,530,5,89,0,0,530,71,1,0,0,0,531,533,5,19,0,0,532,534,3,
		28,14,0,533,532,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,92,0,
		0,536,73,1,0,0,0,537,538,5,11,0,0,538,539,5,92,0,0,539,75,1,0,0,0,540,
		541,5,15,0,0,541,542,5,92,0,0,542,77,1,0,0,0,543,544,3,128,64,0,544,545,
		3,84,42,0,545,546,3,40,20,0,546,547,5,92,0,0,547,79,1,0,0,0,548,549,3,
		54,27,0,549,550,3,28,14,0,550,552,5,92,0,0,551,553,3,28,14,0,552,551,1,
		0,0,0,552,553,1,0,0,0,553,557,1,0,0,0,554,556,5,92,0,0,555,554,1,0,0,0,
		556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,81,1,0,0,0,559,557,
		1,0,0,0,560,561,7,10,0,0,561,562,3,128,64,0,562,83,1,0,0,0,563,564,7,11,
		0,0,564,85,1,0,0,0,565,570,3,28,14,0,566,567,5,90,0,0,567,569,3,28,14,
		0,568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,
		576,1,0,0,0,572,570,1,0,0,0,573,575,5,90,0,0,574,573,1,0,0,0,575,578,1,
		0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,87,1,0,0,0,578,576,1,0,0,0,579,
		581,5,93,0,0,580,582,3,28,14,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,
		1,0,0,0,583,584,5,94,0,0,584,89,1,0,0,0,585,587,5,88,0,0,586,588,3,86,
		43,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,89,0,0,
		590,91,1,0,0,0,591,592,7,12,0,0,592,93,1,0,0,0,593,594,5,104,0,0,594,95,
		1,0,0,0,595,596,5,27,0,0,596,97,1,0,0,0,597,598,5,105,0,0,598,99,1,0,0,
		0,599,600,5,106,0,0,600,101,1,0,0,0,601,602,3,128,64,0,602,603,3,84,42,
		0,603,103,1,0,0,0,604,605,5,12,0,0,605,606,3,28,14,0,606,614,5,91,0,0,
		607,609,3,54,27,0,608,607,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,
		611,1,0,0,0,611,615,1,0,0,0,612,610,1,0,0,0,613,615,3,50,25,0,614,610,
		1,0,0,0,614,613,1,0,0,0,615,105,1,0,0,0,616,617,5,57,0,0,617,625,5,91,
		0,0,618,620,3,54,27,0,619,618,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,
		621,622,1,0,0,0,622,626,1,0,0,0,623,621,1,0,0,0,624,626,3,50,25,0,625,
		621,1,0,0,0,625,624,1,0,0,0,626,107,1,0,0,0,627,630,3,104,52,0,628,630,
		3,106,53,0,629,627,1,0,0,0,629,628,1,0,0,0,630,109,1,0,0,0,631,632,5,88,
		0,0,632,633,5,89,0,0,633,111,1,0,0,0,634,636,3,126,63,0,635,634,1,0,0,
		0,635,636,1,0,0,0,636,637,1,0,0,0,637,638,5,39,0,0,638,641,3,114,57,0,
		639,640,5,93,0,0,640,642,5,94,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,
		643,1,0,0,0,643,644,3,84,42,0,644,645,5,92,0,0,645,113,1,0,0,0,646,649,
		3,116,58,0,647,649,3,128,64,0,648,646,1,0,0,0,648,647,1,0,0,0,649,115,
		1,0,0,0,650,651,7,13,0,0,651,117,1,0,0,0,652,653,5,80,0,0,653,658,3,120,
		60,0,654,655,5,90,0,0,655,657,3,120,60,0,656,654,1,0,0,0,657,660,1,0,0,
		0,658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,658,1,0,0,0,661,
		662,5,79,0,0,662,119,1,0,0,0,663,665,3,136,68,0,664,663,1,0,0,0,665,668,
		1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,
		0,669,670,3,128,64,0,670,121,1,0,0,0,671,672,5,80,0,0,672,677,3,124,62,
		0,673,674,5,90,0,0,674,676,3,124,62,0,675,673,1,0,0,0,676,679,1,0,0,0,
		677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,681,
		5,79,0,0,681,123,1,0,0,0,682,684,3,136,68,0,683,682,1,0,0,0,684,687,1,
		0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,685,1,0,0,0,
		688,689,3,128,64,0,689,692,3,84,42,0,690,691,5,93,0,0,691,693,5,94,0,0,
		692,690,1,0,0,0,692,693,1,0,0,0,693,125,1,0,0,0,694,695,5,93,0,0,695,696,
		3,36,18,0,696,697,5,94,0,0,697,127,1,0,0,0,698,700,3,84,42,0,699,701,3,
		118,59,0,700,699,1,0,0,0,700,701,1,0,0,0,701,705,1,0,0,0,702,704,3,88,
		44,0,703,702,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,
		129,1,0,0,0,707,705,1,0,0,0,708,709,5,80,0,0,709,710,5,80,0,0,710,131,
		1,0,0,0,711,712,5,79,0,0,712,713,5,79,0,0,713,133,1,0,0,0,714,715,7,14,
		0,0,715,135,1,0,0,0,716,717,7,15,0,0,717,137,1,0,0,0,718,719,7,16,0,0,
		719,139,1,0,0,0,80,142,144,151,156,163,167,170,175,187,193,196,200,203,
		208,214,217,222,225,233,236,243,250,255,261,264,267,270,273,278,284,288,
		296,299,302,305,309,314,324,360,364,366,385,391,396,399,405,408,416,425,
		430,440,445,452,456,477,487,508,526,533,552,557,570,576,581,587,610,614,
		621,625,629,635,641,648,658,666,677,685,692,700,705
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
