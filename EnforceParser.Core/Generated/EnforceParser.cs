//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/EnforceParser/EnforceParser.Core/Generated\EnforceParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EnforceParser.Core.Generated;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnforceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, CLASS=6, ENUM=7, SWITCH=8, EXTENDS=9, 
		CONST=10, BREAK=11, CASE=12, ELSE=13, FOR=14, CONTINUE=15, FOREACH=16, 
		IF=17, NEW=18, RETURN=19, THIS=20, THREAD=21, VOID=22, WHILE=23, AUTOPTR=24, 
		AUTO=25, REF=26, NULL=27, NOTNULL=28, FUNC=29, NATIVE=30, VOLATILE=31, 
		PROTO=32, STATIC=33, OWNED=34, REFERENCE=35, OUT=36, PROTECTED=37, EVENT=38, 
		TYPEDEF=39, MODDED=40, OVERRIDE=41, SEALED=42, INOUT=43, SUPER=44, TYPENAME=45, 
		POINTER=46, GOTO=47, PRIVATE=48, EXTERNAL=49, DELETE=50, LOCAL=51, TYPE_INT=52, 
		TYPE_FLOAT=53, TYPE_BOOL=54, TYPE_STRING=55, TYPE_VECTOR=56, DEFAULT=57, 
		Increment=58, Decrement=59, LShift_Assign=60, RShift_Assign=61, Subtract_Assign=62, 
		Add_Assign=63, Multiply_Assign=64, Divide_Assign=65, Or_Assign=66, Xor_Assign=67, 
		LessEqual=68, GreaterEqual=69, And_Assign=70, Inequal=71, Equal=72, LogicalOr=73, 
		LogicalAnd=74, BitwiseOr=75, BitwiseXor=76, BitwiseAnd=77, BitwiseNot=78, 
		Greater=79, Less=80, Assign=81, Subtract=82, Add=83, Multiply=84, Divide=85, 
		LParenthesis=86, RParenthesis=87, LCurly=88, RCurly=89, Comma=90, Colon=91, 
		Semicolon=92, LSBracket=93, RSBracket=94, Dot=95, Bang=96, DoubleQuote=97, 
		SingleQuote=98, Modulo=99, IDENTIFIER=100, PREPROC_LINE=101, PREPROC_FILE=102, 
		LiteralString=103, LiteralInteger=104, LiteralFloat=105, LiteralBoolean=106, 
		PREPROC_Whitespaces=107, PREPROC_digits=108, PREPROC_define=109, PREPROC_include=110, 
		PREPROC_undef=111, PREPROC_if=112, PREPROC_ifdef=113, PREPROC_ifndef=114, 
		PREPROC_else=115, PREPROC_endif=116, PREPROC_LParenthesis=117, PREPROC_RParenthesis=118, 
		PREPROC_LSBracket=119, PREPROC_RSBracket=120, PREPROC_Comma=121, PREPROC_Add=122, 
		PREPROC_Subtract=123, PREPROC_Semicolon=124, PREPROC_Assign=125;
	public const int
		RULE_computationalStart = 0, RULE_globalDeclaration = 1, RULE_typeDeclaration = 2, 
		RULE_varAndFunctionBlock = 3, RULE_variableDeclaration = 4, RULE_variableDeclarators = 5, 
		RULE_variableDeclarator = 6, RULE_functionDeclaration = 7, RULE_functionParameters = 8, 
		RULE_functionParameter = 9, RULE_classDeclaration = 10, RULE_enumDeclaration = 11, 
		RULE_enumBody = 12, RULE_enumValue = 13, RULE_expression = 14, RULE_castExpression = 15, 
		RULE_primaryExpression = 16, RULE_objectCreation = 17, RULE_functionCall = 18, 
		RULE_parenthesisedExpression = 19, RULE_functionCallParameters = 20, RULE_functionCallParameterList = 21, 
		RULE_functionCallParameter = 22, RULE_optionalParameter = 23, RULE_arrayIndexExpression = 24, 
		RULE_statementSingleOrBlock = 25, RULE_statementBlock = 26, RULE_statement = 27, 
		RULE_gotoStatement = 28, RULE_ifStatement = 29, RULE_elseStatement = 30, 
		RULE_deleteStatement = 31, RULE_forStatement = 32, RULE_foreachStatement = 33, 
		RULE_whileStatement = 34, RULE_switchStatement = 35, RULE_returnStatement = 36, 
		RULE_breakStatement = 37, RULE_continueStatement = 38, RULE_forControl = 39, 
		RULE_typeExtension_Child = 40, RULE_identifier = 41, RULE_expressionList = 42, 
		RULE_arrayIndex = 43, RULE_literalArray = 44, RULE_literalString = 45, 
		RULE_literalInteger = 46, RULE_literalNull = 47, RULE_literalFloat = 48, 
		RULE_literalBoolean = 49, RULE_foreachVariable = 50, RULE_switchLabel = 51, 
		RULE_defaultSwitchLabel = 52, RULE_switchBlockStatementGroup = 53, RULE_emptyBlock = 54, 
		RULE_typedefDeclaration = 55, RULE_typedefType = 56, RULE_keyword = 57, 
		RULE_typeList = 58, RULE_genericType = 59, RULE_genericTypeDeclarationList = 60, 
		RULE_genericTypeDeclaration = 61, RULE_annotation = 62, RULE_classReference = 63, 
		RULE_leftShift = 64, RULE_rightShift = 65, RULE_typeModifer = 66, RULE_variableModifier = 67, 
		RULE_functionModifier = 68;
	public static readonly string[] ruleNames = {
		"computationalStart", "globalDeclaration", "typeDeclaration", "varAndFunctionBlock", 
		"variableDeclaration", "variableDeclarators", "variableDeclarator", "functionDeclaration", 
		"functionParameters", "functionParameter", "classDeclaration", "enumDeclaration", 
		"enumBody", "enumValue", "expression", "castExpression", "primaryExpression", 
		"objectCreation", "functionCall", "parenthesisedExpression", "functionCallParameters", 
		"functionCallParameterList", "functionCallParameter", "optionalParameter", 
		"arrayIndexExpression", "statementSingleOrBlock", "statementBlock", "statement", 
		"gotoStatement", "ifStatement", "elseStatement", "deleteStatement", "forStatement", 
		"foreachStatement", "whileStatement", "switchStatement", "returnStatement", 
		"breakStatement", "continueStatement", "forControl", "typeExtension_Child", 
		"identifier", "expressionList", "arrayIndex", "literalArray", "literalString", 
		"literalInteger", "literalNull", "literalFloat", "literalBoolean", "foreachVariable", 
		"switchLabel", "defaultSwitchLabel", "switchBlockStatementGroup", "emptyBlock", 
		"typedefDeclaration", "typedefType", "keyword", "typeList", "genericType", 
		"genericTypeDeclarationList", "genericTypeDeclaration", "annotation", 
		"classReference", "leftShift", "rightShift", "typeModifer", "variableModifier", 
		"functionModifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'enum'", "'switch'", "'extends'", 
		"'const'", "'break'", "'case'", null, "'for'", "'contine'", "'foreach'", 
		null, "'new'", "'return'", "'this'", "'thread'", "'void'", "'while'", 
		"'autoptr'", "'auto'", "'ref'", "'null'", "'notnull'", "'func'", "'native'", 
		"'volatile'", "'proto'", "'static'", "'owned'", "'reference'", "'out'", 
		"'protected'", "'event'", "'typedef'", "'modded'", "'override'", "'sealed'", 
		"'inout'", "'super'", "'typename'", "'pointer'", "'goto'", "'private'", 
		"'external'", "'delete'", "'local'", "'int'", "'float'", "'bool'", "'string'", 
		"'vector'", "'default'", "'++'", "'--'", "'<<='", "'>>='", "'-='", "'+='", 
		"'*='", "'/='", "'|='", "'^='", "'<='", "'>='", "'&='", "'!='", "'=='", 
		"'||'", "'&&'", "'|'", "'^'", "'&'", "'~'", "'>'", "'<'", null, null, 
		null, "'*'", "'/'", null, null, "'{'", "'}'", null, "':'", null, null, 
		null, "'.'", "'!'", "'\"'", "'''", "'%'", null, "'__LINE__'", "'__FILE__'", 
		null, null, null, null, null, null, "'define'", "'include'", "'undef'", 
		null, "'ifdef'", "'ifndef'", null, "'endif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "CLASS", "ENUM", "SWITCH", "EXTENDS", 
		"CONST", "BREAK", "CASE", "ELSE", "FOR", "CONTINUE", "FOREACH", "IF", 
		"NEW", "RETURN", "THIS", "THREAD", "VOID", "WHILE", "AUTOPTR", "AUTO", 
		"REF", "NULL", "NOTNULL", "FUNC", "NATIVE", "VOLATILE", "PROTO", "STATIC", 
		"OWNED", "REFERENCE", "OUT", "PROTECTED", "EVENT", "TYPEDEF", "MODDED", 
		"OVERRIDE", "SEALED", "INOUT", "SUPER", "TYPENAME", "POINTER", "GOTO", 
		"PRIVATE", "EXTERNAL", "DELETE", "LOCAL", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
		"TYPE_STRING", "TYPE_VECTOR", "DEFAULT", "Increment", "Decrement", "LShift_Assign", 
		"RShift_Assign", "Subtract_Assign", "Add_Assign", "Multiply_Assign", "Divide_Assign", 
		"Or_Assign", "Xor_Assign", "LessEqual", "GreaterEqual", "And_Assign", 
		"Inequal", "Equal", "LogicalOr", "LogicalAnd", "BitwiseOr", "BitwiseXor", 
		"BitwiseAnd", "BitwiseNot", "Greater", "Less", "Assign", "Subtract", "Add", 
		"Multiply", "Divide", "LParenthesis", "RParenthesis", "LCurly", "RCurly", 
		"Comma", "Colon", "Semicolon", "LSBracket", "RSBracket", "Dot", "Bang", 
		"DoubleQuote", "SingleQuote", "Modulo", "IDENTIFIER", "PREPROC_LINE", 
		"PREPROC_FILE", "LiteralString", "LiteralInteger", "LiteralFloat", "LiteralBoolean", 
		"PREPROC_Whitespaces", "PREPROC_digits", "PREPROC_define", "PREPROC_include", 
		"PREPROC_undef", "PREPROC_if", "PREPROC_ifdef", "PREPROC_ifndef", "PREPROC_else", 
		"PREPROC_endif", "PREPROC_LParenthesis", "PREPROC_RParenthesis", "PREPROC_LSBracket", 
		"PREPROC_RSBracket", "PREPROC_Comma", "PREPROC_Add", "PREPROC_Subtract", 
		"PREPROC_Semicolon", "PREPROC_Assign"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnforceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnforceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnforceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnforceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnforceParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
				{
				State = 140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 138;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 139;
					typeDeclaration();
					}
					break;
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalDeclaration);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclarationContext typedefDeclaration() {
			return GetRuleContext<TypedefDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeDeclaration);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				enumDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				typedefDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAndFunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public VarAndFunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAndFunctionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVarAndFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVarAndFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public VarAndFunctionBlockContext varAndFunctionBlock() {
		VarAndFunctionBlockContext _localctx = new VarAndFunctionBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAndFunctionBlock);
		int _la;
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case VOID:
			case AUTOPTR:
			case AUTO:
			case REF:
			case NOTNULL:
			case FUNC:
			case NATIVE:
			case VOLATILE:
			case PROTO:
			case STATIC:
			case OWNED:
			case REFERENCE:
			case OUT:
			case PROTECTED:
			case EVENT:
			case OVERRIDE:
			case INOUT:
			case TYPENAME:
			case PRIVATE:
			case EXTERNAL:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case LSBracket:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 156;
				globalDeclaration();
				}
				}
				break;
			case LCurly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(LCurly);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
					{
					{
					State = 158;
					globalDeclaration();
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 164;
				Match(RCurly);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ClassReferenceContext variableType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 167;
				annotation();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 170;
				variableModifier();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			_localctx.variableType = classReference();
			State = 177;
			variableDeclarators();
			State = 178;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			variableDeclarator();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 181;
				Match(Comma);
				State = 182;
				variableDeclarator();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext variableName;
		public ExpressionContext arrayLength;
		public ExpressionContext variableValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_localctx.variableName = identifier();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 189;
				Match(LSBracket);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
					{
					State = 190;
					_localctx.arrayLength = expression(0);
					}
				}

				State = 193;
				Match(RSBracket);
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 196;
				Match(Assign);
				State = 197;
				_localctx.variableValue = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ClassReferenceContext returnType;
		public IToken deconstructor;
		public IdentifierContext functionName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 200;
				annotation();
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) {
				{
				{
				State = 203;
				functionModifier();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209;
			_localctx.returnType = classReference();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 210;
				Match(LSBracket);
				State = 211;
				Match(RSBracket);
				}
			}

			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitwiseNot) {
				{
				State = 214;
				_localctx.deconstructor = Match(BitwiseNot);
				}
			}

			State = 217;
			_localctx.functionName = identifier();
			State = 218;
			functionParameters();
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 219;
				statementSingleOrBlock();
				}
				break;
			}
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 222;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(LParenthesis);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << TYPENAME) | (1L << PRIVATE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 226;
				functionParameter();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 227;
					Match(Comma);
					State = 228;
					functionParameter();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 236;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ClassReferenceContext parameterType;
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 238;
				variableModifier();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			_localctx.parameterType = classReference();
			State = 245;
			variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		public TypeExtension_ChildContext superclass;
		public VarAndFunctionBlockContext classBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationListContext genericTypeDeclarationList() {
			return GetRuleContext<GenericTypeDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAndFunctionBlockContext varAndFunctionBlock() {
			return GetRuleContext<VarAndFunctionBlockContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 247;
				annotation();
				}
			}

			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 250;
				typeModifer();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 256;
			Match(CLASS);
			State = 257;
			_localctx.classname = identifier();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 258;
				genericTypeDeclarationList();
				}
			}

			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 261;
				_localctx.superclass = typeExtension_Child();
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 264;
				_localctx.classBody = varAndFunctionBlock();
				}
				break;
			}
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 267;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public IdentifierContext enumname;
		public TypeExtension_ChildContext superenum;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext[] typeModifer() {
			return GetRuleContexts<TypeModiferContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModiferContext typeModifer(int i) {
			return GetRuleContext<TypeModiferContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtension_ChildContext typeExtension_Child() {
			return GetRuleContext<TypeExtension_ChildContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 270;
				annotation();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 273;
				typeModifer();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 279;
			Match(ENUM);
			State = 280;
			_localctx.enumname = identifier();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 281;
				_localctx.superenum = typeExtension_Child();
				}
			}

			State = 284;
			enumBody();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 285;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnforceParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnforceParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACES() { return GetTokens(EnforceParser.WHITESPACES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACES(int i) {
			return GetToken(EnforceParser.WHITESPACES, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(LCurly);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 289;
				enumValue();
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 290;
						_la = TokenStream.LA(1);
						if ( !(_la==WHITESPACES || _la==Comma || _la==Semicolon) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 291;
						enumValue();
						}
						} 
					}
					State = 296;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				}
			}

			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 299;
				Match(Comma);
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 302;
				Match(Semicolon);
				}
			}

			State = 305;
			Match(RCurly);
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 306;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext itemname;
		public ExpressionContext itemValue;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_localctx.itemname = identifier();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 310;
				Match(Assign);
				State = 311;
				_localctx.itemValue = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IdentifierContext esVariable;
		public ArrayIndexExpressionContext esArrayIndex;
		public FunctionCallContext esFunction;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(EnforceParser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(EnforceParser.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(EnforceParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(EnforceParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(EnforceParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(EnforceParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(EnforceParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(EnforceParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftContext leftShift() {
			return GetRuleContext<LeftShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(EnforceParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(EnforceParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(EnforceParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inequal() { return GetToken(EnforceParser.Inequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(EnforceParser.BitwiseOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(EnforceParser.BitwiseAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnforceParser.BitwiseNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(EnforceParser.BitwiseXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd() { return GetToken(EnforceParser.LogicalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr() { return GetToken(EnforceParser.LogicalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnforceParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(EnforceParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract_Assign() { return GetToken(EnforceParser.Subtract_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply_Assign() { return GetToken(EnforceParser.Multiply_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide_Assign() { return GetToken(EnforceParser.Divide_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or_Assign() { return GetToken(EnforceParser.Or_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And_Assign() { return GetToken(EnforceParser.And_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LShift_Assign() { return GetToken(EnforceParser.LShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RShift_Assign() { return GetToken(EnforceParser.RShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(EnforceParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 315;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 316;
				Match(THIS);
				}
				break;
			case 3:
				{
				State = 317;
				Match(SUPER);
				}
				break;
			case 4:
				{
				State = 318;
				objectCreation();
				}
				break;
			case 5:
				{
				State = 319;
				castExpression();
				}
				break;
			case 6:
				{
				State = 320;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (Increment - 58)) | (1L << (Decrement - 58)) | (1L << (Subtract - 58)) | (1L << (Add - 58)) | (1L << (Bang - 58)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 321;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 324;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 325;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Multiply - 84)) | (1L << (Divide - 84)) | (1L << (Modulo - 84)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 326;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 328;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Subtract || _la==Add) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 329;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 330;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 331;
						rightShift();
						State = 332;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 335;
						leftShift();
						State = 336;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 338;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 339;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LessEqual - 68)) | (1L << (GreaterEqual - 68)) | (1L << (Greater - 68)) | (1L << (Less - 68)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 340;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 341;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 342;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Inequal || _la==Equal) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 343;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 344;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 345;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (BitwiseOr - 75)) | (1L << (BitwiseXor - 75)) | (1L << (BitwiseAnd - 75)) | (1L << (BitwiseNot - 75)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 346;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 347;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 348;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LogicalOr || _la==LogicalAnd) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 349;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 350;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 351;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (LShift_Assign - 60)) | (1L << (RShift_Assign - 60)) | (1L << (Subtract_Assign - 60)) | (1L << (Add_Assign - 60)) | (1L << (Multiply_Assign - 60)) | (1L << (Divide_Assign - 60)) | (1L << (Or_Assign - 60)) | (1L << (And_Assign - 60)) | (1L << (Assign - 60)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 352;
						expression(1);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 354;
						_localctx.op = Match(Dot);
						State = 358;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
						case 1:
							{
							State = 355;
							_localctx.esVariable = identifier();
							}
							break;
						case 2:
							{
							State = 356;
							_localctx.esArrayIndex = arrayIndexExpression();
							}
							break;
						case 3:
							{
							State = 357;
							_localctx.esFunction = functionCall();
							}
							break;
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 360;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 361;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Increment || _la==Decrement) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public ClassReferenceContext cast;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_castExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(LParenthesis);
			State = 368;
			_localctx.cast = classReference();
			State = 369;
			Match(RParenthesis);
			State = 370;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public FunctionCallContext esFunction;
		public LiteralStringContext esString;
		public LiteralIntegerContext esInt;
		public LiteralFloatContext esFloat;
		public LiteralBooleanContext esBool;
		public ParenthesisedExpressionContext parExpression;
		public LiteralArrayContext esArray;
		public LiteralNullContext esNull;
		public IdentifierContext esVariable;
		public ClassReferenceContext esGeneric;
		public ArrayIndexExpressionContext esArrayIndex;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexExpressionContext arrayIndexExpression() {
			return GetRuleContext<ArrayIndexExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_primaryExpression);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				_localctx.esFunction = functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				_localctx.esString = literalString();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				_localctx.esInt = literalInteger();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375;
				_localctx.esFloat = literalFloat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 376;
				_localctx.esBool = literalBoolean();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 377;
				_localctx.parExpression = parenthesisedExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 378;
				_localctx.esArray = literalArray();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 379;
				_localctx.esNull = literalNull();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 380;
				_localctx.esVariable = identifier();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 381;
				_localctx.esGeneric = classReference();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 382;
				_localctx.esArrayIndex = arrayIndexExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		public IdentifierContext objectName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 34, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(NEW);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 386;
				variableModifier();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 392;
			_localctx.objectName = identifier();
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 393;
				typeList();
				}
				break;
			}
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 396;
				functionCallParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			identifier();
			State = 400;
			functionCallParameters();
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 401;
				Match(LSBracket);
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
					{
					State = 402;
					expression(0);
					}
				}

				State = 405;
				Match(RSBracket);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		public ParenthesisedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParenthesisedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParenthesisedExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisedExpressionContext parenthesisedExpression() {
		ParenthesisedExpressionContext _localctx = new ParenthesisedExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_parenthesisedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(LParenthesis);
			State = 409;
			expression(0);
			State = 410;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterListContext functionCallParameterList() {
			return GetRuleContext<FunctionCallParameterListContext>(0);
		}
		public FunctionCallParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameters(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParametersContext functionCallParameters() {
		FunctionCallParametersContext _localctx = new FunctionCallParametersContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionCallParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(LParenthesis);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
				{
				State = 413;
				functionCallParameterList();
				}
			}

			State = 416;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext[] functionCallParameter() {
			return GetRuleContexts<FunctionCallParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext functionCallParameter(int i) {
			return GetRuleContext<FunctionCallParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public FunctionCallParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterListContext functionCallParameterList() {
		FunctionCallParameterListContext _localctx = new FunctionCallParameterListContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCallParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			functionCallParameter();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 419;
				Match(Comma);
				State = 420;
				functionCallParameter();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public FunctionCallParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterContext functionCallParameter() {
		FunctionCallParameterContext _localctx = new FunctionCallParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCallParameter);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		public IdentifierContext argumentName;
		public ExpressionContext argumentValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_optionalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_localctx.argumentName = identifier();
			State = 431;
			Match(Colon);
			State = 432;
			_localctx.argumentValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public ArrayIndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndexExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexExpressionContext arrayIndexExpression() {
		ArrayIndexExpressionContext _localctx = new ArrayIndexExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayIndexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			identifier();
			State = 435;
			arrayIndex();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSingleOrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public StatementSingleOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSingleOrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementSingleOrBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementSingleOrBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementSingleOrBlockContext statementSingleOrBlock() {
		StatementSingleOrBlockContext _localctx = new StatementSingleOrBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_statementSingleOrBlock);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				statementBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockContext emptyBlock() {
			return GetRuleContext<EmptyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_statementBlock);
		int _la;
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441;
				emptyBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442;
				Match(LCurly);
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Semicolon - 82)) | (1L << (LSBracket - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
					{
					{
					State = 443;
					statement();
					}
					}
					State = 448;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 449;
				Match(RCurly);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expressionaryStatement;
		public VariableDeclarationContext esVariableDeclaration;
		public DeleteStatementContext esDelete;
		public IfStatementContext esIf;
		public ForStatementContext esFor;
		public ForeachStatementContext esForEach;
		public WhileStatementContext esWhile;
		public SwitchStatementContext esSwitch;
		public ReturnStatementContext esReturn;
		public BreakStatementContext esBreak;
		public ContinueStatementContext esContinue;
		public StatementBlockContext esStatementBlock;
		public GotoStatementContext esGoto;
		public IToken esSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				_localctx.expressionaryStatement = expression(0);
				State = 453;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				_localctx.esVariableDeclaration = variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456;
				_localctx.esDelete = deleteStatement();
				State = 457;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 459;
				_localctx.esIf = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 460;
				_localctx.esFor = forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 461;
				_localctx.esForEach = foreachStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 462;
				_localctx.esWhile = whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 463;
				_localctx.esSwitch = switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 464;
				_localctx.esReturn = returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 465;
				_localctx.esBreak = breakStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 466;
				_localctx.esContinue = continueStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 467;
				_localctx.esStatementBlock = statementBlock();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 468;
				_localctx.esGoto = gotoStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 469;
				_localctx.esSemicolon = Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(GOTO);
			State = 473;
			expression(0);
			State = 474;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext ifBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(IF);
			State = 477;
			_localctx.condition = parenthesisedExpression();
			State = 478;
			_localctx.ifBody = statementSingleOrBlock();
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 479;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext elseBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(ELSE);
			State = 483;
			_localctx.elseBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(DELETE);
			State = 486;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(FOR);
			State = 489;
			Match(LParenthesis);
			State = 490;
			forControl();
			State = 491;
			Match(RParenthesis);
			State = 492;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public ExpressionContext enumerating;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnforceParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachVariableContext[] foreachVariable() {
			return GetRuleContexts<ForeachVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachVariableContext foreachVariable(int i) {
			return GetRuleContext<ForeachVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnforceParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(FOREACH);
			State = 495;
			Match(LParenthesis);
			State = 496;
			foreachVariable();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 497;
				Match(Comma);
				State = 498;
				foreachVariable();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 504;
			Match(Colon);
			State = 505;
			_localctx.enumerating = expression(0);
			State = 506;
			Match(RParenthesis);
			State = 507;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ParenthesisedExpressionContext condition;
		public StatementSingleOrBlockContext loopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(WHILE);
			State = 510;
			_localctx.condition = parenthesisedExpression();
			State = 511;
			_localctx.loopBody = statementSingleOrBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(SWITCH);
			State = 514;
			parenthesisedExpression();
			State = 515;
			Match(LCurly);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 516;
				switchBlockStatementGroup();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 522;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(RETURN);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
				{
				State = 525;
				expression(0);
				}
			}

			State = 528;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(BREAK);
			State = 531;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(CONTINUE);
			State = 534;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public StatementContext forInit;
		public ExpressionContext forCondition;
		public ExpressionContext forIteration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnforceParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnforceParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 78, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			_localctx.forInit = statement();
			State = 537;
			_localctx.forCondition = expression(0);
			State = 538;
			Match(Semicolon);
			State = 539;
			_localctx.forIteration = expression(0);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Semicolon) {
				{
				{
				State = 540;
				Match(Semicolon);
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtension_ChildContext : ParserRuleContext {
		public IToken extends;
		public ClassReferenceContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		public TypeExtension_ChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension_Child; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeExtension_Child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeExtension_Child(this);
		}
	}

	[RuleVersion(0)]
	public TypeExtension_ChildContext typeExtension_Child() {
		TypeExtension_ChildContext _localctx = new TypeExtension_ChildContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeExtension_Child);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			_localctx.extends = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDS || _la==Colon) ) {
				_localctx.extends = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 547;
			_localctx.classname = classReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 82, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << AUTO) | (1L << FUNC) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			expression(0);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 552;
				Match(Comma);
				State = 553;
				expression(0);
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayIndex(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 86, RULE_arrayIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(LSBracket);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
				{
				State = 560;
				expression(0);
				}
			}

			State = 563;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 88, RULE_literalArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(LCurly);
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << AUTO) | (1L << NULL) | (1L << FUNC) | (1L << SUPER) | (1L << TYPENAME) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
				{
				State = 566;
				expressionList();
				}
			}

			State = 569;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(EnforceParser.LiteralString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_LINE() { return GetToken(EnforceParser.PREPROC_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROC_FILE() { return GetToken(EnforceParser.PREPROC_FILE, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 90, RULE_literalString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (PREPROC_LINE - 101)) | (1L << (PREPROC_FILE - 101)) | (1L << (LiteralString - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(EnforceParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 92, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 94, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(EnforceParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 96, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 98, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(LiteralBoolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachVariableContext : ParserRuleContext {
		public ClassReferenceContext iteratedVariableType;
		public IdentifierContext iteratedVariableName;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ForeachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachVariable(this);
		}
	}

	[RuleVersion(0)]
	public ForeachVariableContext foreachVariable() {
		ForeachVariableContext _localctx = new ForeachVariableContext(Context, State);
		EnterRule(_localctx, 100, RULE_foreachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_localctx.iteratedVariableType = classReference();
			State = 582;
			_localctx.iteratedVariableName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 102, RULE_switchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(CASE);
			{
			State = 585;
			expression(0);
			}
			State = 586;
			Match(Colon);
			State = 594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Semicolon - 82)) | (1L << (LSBracket - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
					{
					{
					State = 587;
					statement();
					}
					}
					State = 592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 593;
				statementSingleOrBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultSwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnforceParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSingleOrBlockContext statementSingleOrBlock() {
			return GetRuleContext<StatementSingleOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultSwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultSwitchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDefaultSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDefaultSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public DefaultSwitchLabelContext defaultSwitchLabel() {
		DefaultSwitchLabelContext _localctx = new DefaultSwitchLabelContext(Context, State);
		EnterRule(_localctx, 104, RULE_defaultSwitchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(DEFAULT);
			State = 597;
			Match(Colon);
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Subtract - 82)) | (1L << (Add - 82)) | (1L << (LParenthesis - 82)) | (1L << (LCurly - 82)) | (1L << (Semicolon - 82)) | (1L << (LSBracket - 82)) | (1L << (Bang - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (PREPROC_LINE - 82)) | (1L << (PREPROC_FILE - 82)) | (1L << (LiteralString - 82)) | (1L << (LiteralInteger - 82)) | (1L << (LiteralFloat - 82)) | (1L << (LiteralBoolean - 82)))) != 0)) {
					{
					{
					State = 598;
					statement();
					}
					}
					State = 603;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 604;
				statementSingleOrBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel() {
			return GetRuleContext<SwitchLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultSwitchLabelContext defaultSwitchLabel() {
			return GetRuleContext<DefaultSwitchLabelContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 106, RULE_switchBlockStatementGroup);
		try {
			State = 609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				switchLabel();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608;
				defaultSwitchLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnforceParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnforceParser.RCurly, 0); }
		public EmptyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEmptyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEmptyBlock(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockContext emptyBlock() {
		EmptyBlockContext _localctx = new EmptyBlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_emptyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(LCurly);
			State = 612;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclarationContext : ParserRuleContext {
		public TypedefTypeContext fromType;
		public IdentifierContext toType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnforceParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedefTypeContext typedefType() {
			return GetRuleContext<TypedefTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public TypedefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclarationContext typedefDeclaration() {
		TypedefDeclarationContext _localctx = new TypedefDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_typedefDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 614;
				annotation();
				}
			}

			State = 617;
			Match(TYPEDEF);
			State = 618;
			_localctx.fromType = typedefType();
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 619;
				Match(LSBracket);
				State = 620;
				Match(RSBracket);
				}
			}

			State = 623;
			_localctx.toType = identifier();
			State = 624;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		public TypedefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypedefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypedefType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefTypeContext typedefType() {
		TypedefTypeContext _localctx = new TypedefTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_typedefType);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627;
				classReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnforceParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(EnforceParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnforceParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(EnforceParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(EnforceParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(EnforceParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnforceParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnforceParser.LiteralBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 114, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << SWITCH) | (1L << EXTENDS) | (1L << CONST) | (1L << BREAK) | (1L << CASE) | (1L << ELSE) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << AUTO) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << FUNC) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << SUPER) | (1L << TYPENAME) | (1L << POINTER) | (1L << GOTO) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << DELETE) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << DEFAULT))) != 0) || _la==LiteralBoolean) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext[] genericType() {
			return GetRuleContexts<GenericTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType(int i) {
			return GetRuleContext<GenericTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(Less);
			State = 633;
			genericType();
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 634;
				Match(Comma);
				State = 635;
				genericType();
				}
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 641;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public ClassReferenceContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_genericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 643;
				variableModifier();
				}
				}
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 649;
			_localctx.type = classReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnforceParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext[] genericTypeDeclaration() {
			return GetRuleContexts<GenericTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext genericTypeDeclaration(int i) {
			return GetRuleContext<GenericTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnforceParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnforceParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnforceParser.Comma, i);
		}
		public GenericTypeDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationListContext genericTypeDeclarationList() {
		GenericTypeDeclarationListContext _localctx = new GenericTypeDeclarationListContext(Context, State);
		EnterRule(_localctx, 120, RULE_genericTypeDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(Less);
			State = 652;
			genericTypeDeclaration();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 653;
				Match(Comma);
				State = 654;
				genericTypeDeclaration();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationContext : ParserRuleContext {
		public ClassReferenceContext type;
		public IdentifierContext typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ClassReferenceContext classReference() {
			return GetRuleContext<ClassReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public GenericTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationContext genericTypeDeclaration() {
		GenericTypeDeclarationContext _localctx = new GenericTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_genericTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 662;
				variableModifier();
				}
				}
				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 668;
			_localctx.type = classReference();
			State = 669;
			_localctx.typeName = identifier();
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 670;
				Match(LSBracket);
				State = 671;
				Match(RSBracket);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnforceParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnforceParser.RSBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(LSBracket);
			State = 675;
			functionCall();
			State = 676;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassReferenceContext : ParserRuleContext {
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ClassReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassReference(this);
		}
	}

	[RuleVersion(0)]
	public ClassReferenceContext classReference() {
		ClassReferenceContext _localctx = new ClassReferenceContext(Context, State);
		EnterRule(_localctx, 126, RULE_classReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_localctx.classname = identifier();
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 679;
				typeList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(EnforceParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(EnforceParser.Less, i);
		}
		public LeftShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLeftShift(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftContext leftShift() {
		LeftShiftContext _localctx = new LeftShiftContext(Context, State);
		EnterRule(_localctx, 128, RULE_leftShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(Less);
			State = 683;
			Match(Less);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(EnforceParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(EnforceParser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 130, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(Greater);
			State = 686;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModiferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		public TypeModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeModifer(this);
		}
	}

	[RuleVersion(0)]
	public TypeModiferContext typeModifer() {
		TypeModiferContext _localctx = new TypeModiferContext(Context, State);
		EnterRule(_localctx, 132, RULE_typeModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.LA(1);
			if ( !(_la==MODDED || _la==SEALED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 134, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,125,695,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,5,0,141,8,0,
		10,0,12,0,144,9,0,1,0,1,0,1,1,1,1,3,1,150,8,1,1,2,1,2,1,2,3,2,155,8,2,
		1,3,1,3,1,3,5,3,160,8,3,10,3,12,3,163,9,3,1,3,3,3,166,8,3,1,4,3,4,169,
		8,4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,
		184,8,5,10,5,12,5,187,9,5,1,6,1,6,1,6,3,6,192,8,6,1,6,3,6,195,8,6,1,6,
		1,6,3,6,199,8,6,1,7,3,7,202,8,7,1,7,5,7,205,8,7,10,7,12,7,208,9,7,1,7,
		1,7,1,7,3,7,213,8,7,1,7,3,7,216,8,7,1,7,1,7,1,7,3,7,221,8,7,1,7,3,7,224,
		8,7,1,8,1,8,1,8,1,8,5,8,230,8,8,10,8,12,8,233,9,8,3,8,235,8,8,1,8,1,8,
		1,9,5,9,240,8,9,10,9,12,9,243,9,9,1,9,1,9,1,9,1,10,3,10,249,8,10,1,10,
		5,10,252,8,10,10,10,12,10,255,9,10,1,10,1,10,1,10,3,10,260,8,10,1,10,3,
		10,263,8,10,1,10,3,10,266,8,10,1,10,3,10,269,8,10,1,11,3,11,272,8,11,1,
		11,5,11,275,8,11,10,11,12,11,278,9,11,1,11,1,11,1,11,3,11,283,8,11,1,11,
		1,11,3,11,287,8,11,1,12,1,12,1,12,1,12,5,12,293,8,12,10,12,12,12,296,9,
		12,3,12,298,8,12,1,12,3,12,301,8,12,1,12,3,12,304,8,12,1,12,1,12,3,12,
		308,8,12,1,13,1,13,1,13,3,13,313,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,3,14,323,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,359,8,14,1,14,1,
		14,5,14,363,8,14,10,14,12,14,366,9,14,1,15,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,384,8,16,1,17,1,17,
		5,17,388,8,17,10,17,12,17,391,9,17,1,17,1,17,3,17,395,8,17,1,17,3,17,398,
		8,17,1,18,1,18,1,18,1,18,3,18,404,8,18,1,18,3,18,407,8,18,1,19,1,19,1,
		19,1,19,1,20,1,20,3,20,415,8,20,1,20,1,20,1,21,1,21,1,21,5,21,422,8,21,
		10,21,12,21,425,9,21,1,22,1,22,3,22,429,8,22,1,23,1,23,1,23,1,23,1,24,
		1,24,1,24,1,25,1,25,3,25,440,8,25,1,26,1,26,1,26,5,26,445,8,26,10,26,12,
		26,448,9,26,1,26,3,26,451,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,471,8,27,1,28,1,
		28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,481,8,29,1,30,1,30,1,30,1,31,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,5,33,500,8,
		33,10,33,12,33,503,9,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
		35,1,35,1,35,1,35,5,35,518,8,35,10,35,12,35,521,9,35,1,35,1,35,1,36,1,
		36,3,36,527,8,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
		1,39,1,39,5,39,542,8,39,10,39,12,39,545,9,39,1,40,1,40,1,40,1,41,1,41,
		1,42,1,42,1,42,5,42,555,8,42,10,42,12,42,558,9,42,1,43,1,43,3,43,562,8,
		43,1,43,1,43,1,44,1,44,3,44,568,8,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
		1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,589,8,
		51,10,51,12,51,592,9,51,1,51,3,51,595,8,51,1,52,1,52,1,52,5,52,600,8,52,
		10,52,12,52,603,9,52,1,52,3,52,606,8,52,1,53,1,53,3,53,610,8,53,1,54,1,
		54,1,54,1,55,3,55,616,8,55,1,55,1,55,1,55,1,55,3,55,622,8,55,1,55,1,55,
		1,55,1,56,1,56,3,56,629,8,56,1,57,1,57,1,58,1,58,1,58,1,58,5,58,637,8,
		58,10,58,12,58,640,9,58,1,58,1,58,1,59,5,59,645,8,59,10,59,12,59,648,9,
		59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,656,8,60,10,60,12,60,659,9,60,1,
		60,1,60,1,61,5,61,664,8,61,10,61,12,61,667,9,61,1,61,1,61,1,61,1,61,3,
		61,673,8,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,681,8,63,1,64,1,64,1,64,
		1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,0,1,28,69,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,0,
		17,3,0,5,5,90,90,92,92,3,0,58,59,82,83,96,96,2,0,84,85,99,99,1,0,82,83,
		2,0,68,69,79,80,1,0,71,72,1,0,75,78,1,0,73,74,3,0,60,66,70,70,81,81,1,
		0,58,59,2,0,9,9,91,91,6,0,22,22,25,25,29,29,45,45,52,56,100,100,1,0,101,
		103,2,0,6,57,106,106,2,0,40,40,42,42,7,0,10,10,24,24,26,26,28,28,32,37,
		43,43,48,48,4,0,30,34,37,38,41,41,48,49,737,0,142,1,0,0,0,2,149,1,0,0,
		0,4,154,1,0,0,0,6,165,1,0,0,0,8,168,1,0,0,0,10,180,1,0,0,0,12,188,1,0,
		0,0,14,201,1,0,0,0,16,225,1,0,0,0,18,241,1,0,0,0,20,248,1,0,0,0,22,271,
		1,0,0,0,24,288,1,0,0,0,26,309,1,0,0,0,28,322,1,0,0,0,30,367,1,0,0,0,32,
		383,1,0,0,0,34,385,1,0,0,0,36,399,1,0,0,0,38,408,1,0,0,0,40,412,1,0,0,
		0,42,418,1,0,0,0,44,428,1,0,0,0,46,430,1,0,0,0,48,434,1,0,0,0,50,439,1,
		0,0,0,52,450,1,0,0,0,54,470,1,0,0,0,56,472,1,0,0,0,58,476,1,0,0,0,60,482,
		1,0,0,0,62,485,1,0,0,0,64,488,1,0,0,0,66,494,1,0,0,0,68,509,1,0,0,0,70,
		513,1,0,0,0,72,524,1,0,0,0,74,530,1,0,0,0,76,533,1,0,0,0,78,536,1,0,0,
		0,80,546,1,0,0,0,82,549,1,0,0,0,84,551,1,0,0,0,86,559,1,0,0,0,88,565,1,
		0,0,0,90,571,1,0,0,0,92,573,1,0,0,0,94,575,1,0,0,0,96,577,1,0,0,0,98,579,
		1,0,0,0,100,581,1,0,0,0,102,584,1,0,0,0,104,596,1,0,0,0,106,609,1,0,0,
		0,108,611,1,0,0,0,110,615,1,0,0,0,112,628,1,0,0,0,114,630,1,0,0,0,116,
		632,1,0,0,0,118,646,1,0,0,0,120,651,1,0,0,0,122,665,1,0,0,0,124,674,1,
		0,0,0,126,678,1,0,0,0,128,682,1,0,0,0,130,685,1,0,0,0,132,688,1,0,0,0,
		134,690,1,0,0,0,136,692,1,0,0,0,138,141,3,2,1,0,139,141,3,4,2,0,140,138,
		1,0,0,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,
		0,143,145,1,0,0,0,144,142,1,0,0,0,145,146,5,0,0,1,146,1,1,0,0,0,147,150,
		3,8,4,0,148,150,3,14,7,0,149,147,1,0,0,0,149,148,1,0,0,0,150,3,1,0,0,0,
		151,155,3,20,10,0,152,155,3,22,11,0,153,155,3,110,55,0,154,151,1,0,0,0,
		154,152,1,0,0,0,154,153,1,0,0,0,155,5,1,0,0,0,156,166,3,2,1,0,157,161,
		5,88,0,0,158,160,3,2,1,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,
		0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,166,5,89,0,0,165,
		156,1,0,0,0,165,157,1,0,0,0,166,7,1,0,0,0,167,169,3,124,62,0,168,167,1,
		0,0,0,168,169,1,0,0,0,169,173,1,0,0,0,170,172,3,134,67,0,171,170,1,0,0,
		0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,
		173,1,0,0,0,176,177,3,126,63,0,177,178,3,10,5,0,178,179,5,92,0,0,179,9,
		1,0,0,0,180,185,3,12,6,0,181,182,5,90,0,0,182,184,3,12,6,0,183,181,1,0,
		0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,11,1,0,0,0,187,
		185,1,0,0,0,188,194,3,82,41,0,189,191,5,93,0,0,190,192,3,28,14,0,191,190,
		1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,195,5,94,0,0,194,189,1,0,0,
		0,194,195,1,0,0,0,195,198,1,0,0,0,196,197,5,81,0,0,197,199,3,28,14,0,198,
		196,1,0,0,0,198,199,1,0,0,0,199,13,1,0,0,0,200,202,3,124,62,0,201,200,
		1,0,0,0,201,202,1,0,0,0,202,206,1,0,0,0,203,205,3,136,68,0,204,203,1,0,
		0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,
		206,1,0,0,0,209,212,3,126,63,0,210,211,5,93,0,0,211,213,5,94,0,0,212,210,
		1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,216,5,78,0,0,215,214,1,0,0,
		0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,3,82,41,0,218,220,3,16,8,0,219,
		221,3,50,25,0,220,219,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,
		5,92,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,15,1,0,0,0,225,234,5,86,0,
		0,226,231,3,18,9,0,227,228,5,90,0,0,228,230,3,18,9,0,229,227,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,0,0,0,233,231,1,
		0,0,0,234,226,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,87,0,0,
		237,17,1,0,0,0,238,240,3,134,67,0,239,238,1,0,0,0,240,243,1,0,0,0,241,
		239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,3,
		126,63,0,245,246,3,12,6,0,246,19,1,0,0,0,247,249,3,124,62,0,248,247,1,
		0,0,0,248,249,1,0,0,0,249,253,1,0,0,0,250,252,3,132,66,0,251,250,1,0,0,
		0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,
		253,1,0,0,0,256,257,5,6,0,0,257,259,3,82,41,0,258,260,3,120,60,0,259,258,
		1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,263,3,80,40,0,262,261,1,0,
		0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,3,6,3,0,265,264,1,0,0,0,265,
		266,1,0,0,0,266,268,1,0,0,0,267,269,5,92,0,0,268,267,1,0,0,0,268,269,1,
		0,0,0,269,21,1,0,0,0,270,272,3,124,62,0,271,270,1,0,0,0,271,272,1,0,0,
		0,272,276,1,0,0,0,273,275,3,132,66,0,274,273,1,0,0,0,275,278,1,0,0,0,276,
		274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,280,5,
		7,0,0,280,282,3,82,41,0,281,283,3,80,40,0,282,281,1,0,0,0,282,283,1,0,
		0,0,283,284,1,0,0,0,284,286,3,24,12,0,285,287,5,92,0,0,286,285,1,0,0,0,
		286,287,1,0,0,0,287,23,1,0,0,0,288,297,5,88,0,0,289,294,3,26,13,0,290,
		291,7,0,0,0,291,293,3,26,13,0,292,290,1,0,0,0,293,296,1,0,0,0,294,292,
		1,0,0,0,294,295,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,297,289,1,0,0,
		0,297,298,1,0,0,0,298,300,1,0,0,0,299,301,5,90,0,0,300,299,1,0,0,0,300,
		301,1,0,0,0,301,303,1,0,0,0,302,304,5,92,0,0,303,302,1,0,0,0,303,304,1,
		0,0,0,304,305,1,0,0,0,305,307,5,89,0,0,306,308,5,92,0,0,307,306,1,0,0,
		0,307,308,1,0,0,0,308,25,1,0,0,0,309,312,3,82,41,0,310,311,5,81,0,0,311,
		313,3,28,14,0,312,310,1,0,0,0,312,313,1,0,0,0,313,27,1,0,0,0,314,315,6,
		14,-1,0,315,323,3,32,16,0,316,323,5,20,0,0,317,323,5,44,0,0,318,323,3,
		34,17,0,319,323,3,30,15,0,320,321,7,1,0,0,321,323,3,28,14,10,322,314,1,
		0,0,0,322,316,1,0,0,0,322,317,1,0,0,0,322,318,1,0,0,0,322,319,1,0,0,0,
		322,320,1,0,0,0,323,364,1,0,0,0,324,325,10,9,0,0,325,326,7,2,0,0,326,363,
		3,28,14,10,327,328,10,8,0,0,328,329,7,3,0,0,329,363,3,28,14,9,330,331,
		10,7,0,0,331,332,3,130,65,0,332,333,3,28,14,8,333,363,1,0,0,0,334,335,
		10,6,0,0,335,336,3,128,64,0,336,337,3,28,14,7,337,363,1,0,0,0,338,339,
		10,5,0,0,339,340,7,4,0,0,340,363,3,28,14,6,341,342,10,4,0,0,342,343,7,
		5,0,0,343,363,3,28,14,5,344,345,10,3,0,0,345,346,7,6,0,0,346,363,3,28,
		14,4,347,348,10,2,0,0,348,349,7,7,0,0,349,363,3,28,14,3,350,351,10,1,0,
		0,351,352,7,8,0,0,352,363,3,28,14,1,353,354,10,14,0,0,354,358,5,95,0,0,
		355,359,3,82,41,0,356,359,3,48,24,0,357,359,3,36,18,0,358,355,1,0,0,0,
		358,356,1,0,0,0,358,357,1,0,0,0,359,363,1,0,0,0,360,361,10,11,0,0,361,
		363,7,9,0,0,362,324,1,0,0,0,362,327,1,0,0,0,362,330,1,0,0,0,362,334,1,
		0,0,0,362,338,1,0,0,0,362,341,1,0,0,0,362,344,1,0,0,0,362,347,1,0,0,0,
		362,350,1,0,0,0,362,353,1,0,0,0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,
		1,0,0,0,364,365,1,0,0,0,365,29,1,0,0,0,366,364,1,0,0,0,367,368,5,86,0,
		0,368,369,3,126,63,0,369,370,5,87,0,0,370,371,3,28,14,0,371,31,1,0,0,0,
		372,384,3,36,18,0,373,384,3,90,45,0,374,384,3,92,46,0,375,384,3,96,48,
		0,376,384,3,98,49,0,377,384,3,38,19,0,378,384,3,88,44,0,379,384,3,94,47,
		0,380,384,3,82,41,0,381,384,3,126,63,0,382,384,3,48,24,0,383,372,1,0,0,
		0,383,373,1,0,0,0,383,374,1,0,0,0,383,375,1,0,0,0,383,376,1,0,0,0,383,
		377,1,0,0,0,383,378,1,0,0,0,383,379,1,0,0,0,383,380,1,0,0,0,383,381,1,
		0,0,0,383,382,1,0,0,0,384,33,1,0,0,0,385,389,5,18,0,0,386,388,3,134,67,
		0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,
		392,1,0,0,0,391,389,1,0,0,0,392,394,3,82,41,0,393,395,3,116,58,0,394,393,
		1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,3,40,20,0,397,396,1,0,
		0,0,397,398,1,0,0,0,398,35,1,0,0,0,399,400,3,82,41,0,400,406,3,40,20,0,
		401,403,5,93,0,0,402,404,3,28,14,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
		405,1,0,0,0,405,407,5,94,0,0,406,401,1,0,0,0,406,407,1,0,0,0,407,37,1,
		0,0,0,408,409,5,86,0,0,409,410,3,28,14,0,410,411,5,87,0,0,411,39,1,0,0,
		0,412,414,5,86,0,0,413,415,3,42,21,0,414,413,1,0,0,0,414,415,1,0,0,0,415,
		416,1,0,0,0,416,417,5,87,0,0,417,41,1,0,0,0,418,423,3,44,22,0,419,420,
		5,90,0,0,420,422,3,44,22,0,421,419,1,0,0,0,422,425,1,0,0,0,423,421,1,0,
		0,0,423,424,1,0,0,0,424,43,1,0,0,0,425,423,1,0,0,0,426,429,3,28,14,0,427,
		429,3,46,23,0,428,426,1,0,0,0,428,427,1,0,0,0,429,45,1,0,0,0,430,431,3,
		82,41,0,431,432,5,91,0,0,432,433,3,28,14,0,433,47,1,0,0,0,434,435,3,82,
		41,0,435,436,3,86,43,0,436,49,1,0,0,0,437,440,3,54,27,0,438,440,3,52,26,
		0,439,437,1,0,0,0,439,438,1,0,0,0,440,51,1,0,0,0,441,451,3,108,54,0,442,
		446,5,88,0,0,443,445,3,54,27,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,
		1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,451,5,89,0,
		0,450,441,1,0,0,0,450,442,1,0,0,0,451,53,1,0,0,0,452,453,3,28,14,0,453,
		454,5,92,0,0,454,471,1,0,0,0,455,471,3,8,4,0,456,457,3,62,31,0,457,458,
		5,92,0,0,458,471,1,0,0,0,459,471,3,58,29,0,460,471,3,64,32,0,461,471,3,
		66,33,0,462,471,3,68,34,0,463,471,3,70,35,0,464,471,3,72,36,0,465,471,
		3,74,37,0,466,471,3,76,38,0,467,471,3,52,26,0,468,471,3,56,28,0,469,471,
		5,92,0,0,470,452,1,0,0,0,470,455,1,0,0,0,470,456,1,0,0,0,470,459,1,0,0,
		0,470,460,1,0,0,0,470,461,1,0,0,0,470,462,1,0,0,0,470,463,1,0,0,0,470,
		464,1,0,0,0,470,465,1,0,0,0,470,466,1,0,0,0,470,467,1,0,0,0,470,468,1,
		0,0,0,470,469,1,0,0,0,471,55,1,0,0,0,472,473,5,47,0,0,473,474,3,28,14,
		0,474,475,5,92,0,0,475,57,1,0,0,0,476,477,5,17,0,0,477,478,3,38,19,0,478,
		480,3,50,25,0,479,481,3,60,30,0,480,479,1,0,0,0,480,481,1,0,0,0,481,59,
		1,0,0,0,482,483,5,13,0,0,483,484,3,50,25,0,484,61,1,0,0,0,485,486,5,50,
		0,0,486,487,3,28,14,0,487,63,1,0,0,0,488,489,5,14,0,0,489,490,5,86,0,0,
		490,491,3,78,39,0,491,492,5,87,0,0,492,493,3,50,25,0,493,65,1,0,0,0,494,
		495,5,16,0,0,495,496,5,86,0,0,496,501,3,100,50,0,497,498,5,90,0,0,498,
		500,3,100,50,0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,
		1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,91,0,0,505,506,3,28,
		14,0,506,507,5,87,0,0,507,508,3,50,25,0,508,67,1,0,0,0,509,510,5,23,0,
		0,510,511,3,38,19,0,511,512,3,50,25,0,512,69,1,0,0,0,513,514,5,8,0,0,514,
		515,3,38,19,0,515,519,5,88,0,0,516,518,3,106,53,0,517,516,1,0,0,0,518,
		521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,
		0,0,0,522,523,5,89,0,0,523,71,1,0,0,0,524,526,5,19,0,0,525,527,3,28,14,
		0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,92,0,0,529,
		73,1,0,0,0,530,531,5,11,0,0,531,532,5,92,0,0,532,75,1,0,0,0,533,534,5,
		15,0,0,534,535,5,92,0,0,535,77,1,0,0,0,536,537,3,54,27,0,537,538,3,28,
		14,0,538,539,5,92,0,0,539,543,3,28,14,0,540,542,5,92,0,0,541,540,1,0,0,
		0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,79,1,0,0,0,545,543,
		1,0,0,0,546,547,7,10,0,0,547,548,3,126,63,0,548,81,1,0,0,0,549,550,7,11,
		0,0,550,83,1,0,0,0,551,556,3,28,14,0,552,553,5,90,0,0,553,555,3,28,14,
		0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,
		85,1,0,0,0,558,556,1,0,0,0,559,561,5,93,0,0,560,562,3,28,14,0,561,560,
		1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,5,94,0,0,564,87,1,0,0,
		0,565,567,5,88,0,0,566,568,3,84,42,0,567,566,1,0,0,0,567,568,1,0,0,0,568,
		569,1,0,0,0,569,570,5,89,0,0,570,89,1,0,0,0,571,572,7,12,0,0,572,91,1,
		0,0,0,573,574,5,104,0,0,574,93,1,0,0,0,575,576,5,27,0,0,576,95,1,0,0,0,
		577,578,5,105,0,0,578,97,1,0,0,0,579,580,5,106,0,0,580,99,1,0,0,0,581,
		582,3,126,63,0,582,583,3,82,41,0,583,101,1,0,0,0,584,585,5,12,0,0,585,
		586,3,28,14,0,586,594,5,91,0,0,587,589,3,54,27,0,588,587,1,0,0,0,589,592,
		1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,595,1,0,0,0,592,590,1,0,0,
		0,593,595,3,50,25,0,594,590,1,0,0,0,594,593,1,0,0,0,595,103,1,0,0,0,596,
		597,5,57,0,0,597,605,5,91,0,0,598,600,3,54,27,0,599,598,1,0,0,0,600,603,
		1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,606,1,0,0,0,603,601,1,0,0,
		0,604,606,3,50,25,0,605,601,1,0,0,0,605,604,1,0,0,0,606,105,1,0,0,0,607,
		610,3,102,51,0,608,610,3,104,52,0,609,607,1,0,0,0,609,608,1,0,0,0,610,
		107,1,0,0,0,611,612,5,88,0,0,612,613,5,89,0,0,613,109,1,0,0,0,614,616,
		3,124,62,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,5,39,
		0,0,618,621,3,112,56,0,619,620,5,93,0,0,620,622,5,94,0,0,621,619,1,0,0,
		0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,3,82,41,0,624,625,5,92,0,0,625,
		111,1,0,0,0,626,629,3,114,57,0,627,629,3,126,63,0,628,626,1,0,0,0,628,
		627,1,0,0,0,629,113,1,0,0,0,630,631,7,13,0,0,631,115,1,0,0,0,632,633,5,
		80,0,0,633,638,3,118,59,0,634,635,5,90,0,0,635,637,3,118,59,0,636,634,
		1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,
		0,640,638,1,0,0,0,641,642,5,79,0,0,642,117,1,0,0,0,643,645,3,134,67,0,
		644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,649,
		1,0,0,0,648,646,1,0,0,0,649,650,3,126,63,0,650,119,1,0,0,0,651,652,5,80,
		0,0,652,657,3,122,61,0,653,654,5,90,0,0,654,656,3,122,61,0,655,653,1,0,
		0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,
		657,1,0,0,0,660,661,5,79,0,0,661,121,1,0,0,0,662,664,3,134,67,0,663,662,
		1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,
		0,667,665,1,0,0,0,668,669,3,126,63,0,669,672,3,82,41,0,670,671,5,93,0,
		0,671,673,5,94,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,123,1,0,0,0,674,
		675,5,93,0,0,675,676,3,36,18,0,676,677,5,94,0,0,677,125,1,0,0,0,678,680,
		3,82,41,0,679,681,3,116,58,0,680,679,1,0,0,0,680,681,1,0,0,0,681,127,1,
		0,0,0,682,683,5,80,0,0,683,684,5,80,0,0,684,129,1,0,0,0,685,686,5,79,0,
		0,686,687,5,79,0,0,687,131,1,0,0,0,688,689,7,14,0,0,689,133,1,0,0,0,690,
		691,7,15,0,0,691,135,1,0,0,0,692,693,7,16,0,0,693,137,1,0,0,0,76,140,142,
		149,154,161,165,168,173,185,191,194,198,201,206,212,215,220,223,231,234,
		241,248,253,259,262,265,268,271,276,282,286,294,297,300,303,307,312,322,
		358,362,364,383,389,394,397,403,406,414,423,428,439,446,450,470,480,501,
		519,526,543,556,561,567,590,594,601,605,609,615,621,628,638,646,657,665,
		672,680
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
